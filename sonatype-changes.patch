From 155c0907b9a0c73bb7d0b211576874338338dfc3 Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 11:50:31 -0400
Subject: [PATCH 01/22] Code Style Only

Took the default IntelliJ Code style, applied rules outlined in CONTRIBUTING.adoc, then applied code formatting to all Java src files in src/main.
---
 src/main/java/org/zendesk/client/v2/Zendesk.java   | 1043 ++++++++++----------
 .../org/zendesk/client/v2/model/Automation.java    |  152 +--
 .../org/zendesk/client/v2/model/Condition.java     |   96 +-
 .../org/zendesk/client/v2/model/Conditions.java    |   59 +-
 .../java/org/zendesk/client/v2/model/Macro.java    |    3 +-
 .../java/org/zendesk/client/v2/model/Metric.java   |    5 +-
 .../zendesk/client/v2/model/SuspendedTicket.java   |    4 +-
 .../org/zendesk/client/v2/model/TicketForm.java    |  209 ++--
 .../java/org/zendesk/client/v2/model/Trigger.java  |  341 +++----
 .../zendesk/client/v2/model/TwitterMonitor.java    |  192 ++--
 .../v2/model/events/AttachmentRedactionEvent.java  |   66 +-
 .../v2/model/events/CommentRedactionEvent.java     |   38 +-
 .../org/zendesk/client/v2/model/events/Event.java  |    6 +-
 .../v2/model/events/OrganizationActivityEvent.java |   88 +-
 .../v2/model/events/SatisfactionRatingEvent.java   |    2 +-
 .../org/zendesk/client/v2/model/hc/Article.java    |   77 +-
 .../client/v2/model/hc/ArticleAttachments.java     |   24 +-
 .../org/zendesk/client/v2/model/hc/Category.java   |   48 +-
 .../org/zendesk/client/v2/model/hc/Section.java    |   48 +-
 .../zendesk/client/v2/model/hc/Translation.java    |  327 +++---
 .../client/v2/model/targets/BasecampTarget.java    |  204 ++--
 .../client/v2/model/targets/CampfireTarget.java    |  116 +--
 .../client/v2/model/targets/EmailTarget.java       |   76 +-
 .../client/v2/model/targets/PivotalTarget.java     |  188 ++--
 .../zendesk/client/v2/model/targets/Target.java    |   98 +-
 .../client/v2/model/targets/TwitterTarget.java     |   78 +-
 .../zendesk/client/v2/model/targets/UrlTarget.java |  116 +--
 .../java/org/zendesk/client/v2/RealSmokeTest.java  |   70 +-
 .../java/org/zendesk/client/v2/ZendeskConfig.java  |    6 +-
 .../org/zendesk/client/v2/model/EventTest.java     |  100 +-
 .../org/zendesk/client/v2/model/StatusTest.java    |    2 +-
 31 files changed, 2019 insertions(+), 1863 deletions(-)

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index b1a4ca9..d49b5a3 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -16,7 +16,6 @@ import com.ning.http.client.Request;
 import com.ning.http.client.RequestBuilder;
 import com.ning.http.client.Response;
 import com.ning.http.client.multipart.FilePart;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.zendesk.client.v2.model.Attachment;
@@ -82,48 +81,34 @@ import java.util.regex.Pattern;
  */
 public class Zendesk implements Closeable {
     private static final String JSON = "application/json; charset=UTF-8";
+    private static final Map<String, Class<? extends SearchResultEntity>> searchResultTypes = searchResultTypes();
+    private static final Map<String, Class<? extends Target>> targetTypes = targetTypes();
+    private static final Pattern RESTRICTED_PATTERN = Pattern.compile("%2B", Pattern.LITERAL);
+    private static final String NEXT_PAGE = "next_page";
+    private static final String END_TIME = "end_time";
+    private static final String COUNT = "count";
+    private static final int INCREMENTAL_EXPORT_MAX_COUNT_BY_REQUEST = 1000;
+    private static final long FIVE_MINUTES = TimeUnit.MINUTES.toMillis(5);
+    private static final String UTF_8 = "UTF-8";
     private final boolean closeClient;
     private final AsyncHttpClient client;
     private final Realm realm;
     private final String url;
     private final String oauthToken;
+
+
+    //////////////////////////////////////////////////////////////////////
+    // Closeable interface methods
+    //////////////////////////////////////////////////////////////////////
     private final ObjectMapper mapper;
-    private final Logger logger; 
+    private final Logger logger;
+
+    //////////////////////////////////////////////////////////////////////
+    // Action methods
+    //////////////////////////////////////////////////////////////////////
     private boolean closed = false;
-    private static final Map<String, Class<? extends SearchResultEntity>> searchResultTypes = searchResultTypes();
-    private static final Map<String, Class<? extends Target>> targetTypes = targetTypes();
 
-    private static Map<String, Class<? extends SearchResultEntity>> searchResultTypes() {
-       Map<String, Class<? extends SearchResultEntity>> result = new HashMap<String, Class<? extends
-             SearchResultEntity>>();
-       result.put("ticket", Ticket.class);
-       result.put("user", User.class);
-       result.put("group", Group.class);
-       result.put("organization", Organization.class);
-       result.put("topic", Topic.class);
-        result.put("article", Article.class);
-       return Collections.unmodifiableMap(result);
-    }
-    
-    private static Map<String, Class<? extends Target>> targetTypes() {
-       Map<String, Class<? extends Target>> result = new HashMap<String, Class<? extends Target>>();
-       result.put("url_target", UrlTarget.class);
-       result.put("email_target",EmailTarget.class);
-       result.put("basecamp_target", BasecampTarget.class);
-       result.put("campfire_target", CampfireTarget.class);    
-       result.put("pivotal_target", PivotalTarget.class);    
-       result.put("twitter_target", TwitterTarget.class);      
-      
-       // TODO: Implement other Target types
-       //result.put("clickatell_target", ClickatellTarget.class);
-       //result.put("flowdock_target", FlowdockTarget.class);
-       //result.put("get_satisfaction_target", GetSatisfactionTarget.class);
-       //result.put("yammer_target", YammerTarget.class);
-      
-       return Collections.unmodifiableMap(result);
-    }
-
-    private Zendesk(AsyncHttpClient client, String url, String username, String password) {    
+    private Zendesk(AsyncHttpClient client, String url, String username, String password) {
         this.logger = LoggerFactory.getLogger(Zendesk.class);
         this.closeClient = client == null;
         this.oauthToken = null;
@@ -141,11 +126,10 @@ public class Zendesk implements Closeable {
                 throw new IllegalStateException("Cannot specify token or password without specifying username");
             }
             this.realm = null;
-        } 
+        }
         this.mapper = createMapper();
     }
 
-
     private Zendesk(AsyncHttpClient client, String url, String oauthToken) {
         this.logger = LoggerFactory.getLogger(Zendesk.class);
         this.closeClient = client == null;
@@ -161,10 +145,188 @@ public class Zendesk implements Closeable {
         this.mapper = createMapper();
     }
 
+    private static Map<String, Class<? extends SearchResultEntity>> searchResultTypes() {
+        Map<String, Class<? extends SearchResultEntity>> result = new HashMap<String, Class<? extends
+                SearchResultEntity>>();
+        result.put("ticket", Ticket.class);
+        result.put("user", User.class);
+        result.put("group", Group.class);
+        result.put("organization", Organization.class);
+        result.put("topic", Topic.class);
+        result.put("article", Article.class);
+        return Collections.unmodifiableMap(result);
+    }
 
-    //////////////////////////////////////////////////////////////////////
-    // Closeable interface methods
-    //////////////////////////////////////////////////////////////////////
+    private static Map<String, Class<? extends Target>> targetTypes() {
+        Map<String, Class<? extends Target>> result = new HashMap<String, Class<? extends Target>>();
+        result.put("url_target", UrlTarget.class);
+        result.put("email_target", EmailTarget.class);
+        result.put("basecamp_target", BasecampTarget.class);
+        result.put("campfire_target", CampfireTarget.class);
+        result.put("pivotal_target", PivotalTarget.class);
+        result.put("twitter_target", TwitterTarget.class);
+
+        // TODO: Implement other Target types
+        //result.put("clickatell_target", ClickatellTarget.class);
+        //result.put("flowdock_target", FlowdockTarget.class);
+        //result.put("get_satisfaction_target", GetSatisfactionTarget.class);
+        //result.put("yammer_target", YammerTarget.class);
+
+        return Collections.unmodifiableMap(result);
+    }
+
+    private static String encodeUrl(String input) {
+        try {
+            return URLEncoder.encode(input, UTF_8);
+        } catch (UnsupportedEncodingException impossible) {
+            return input;
+        }
+    }
+
+    private static long msToSeconds(long millis) {
+        return TimeUnit.MILLISECONDS.toSeconds(millis);
+    }
+
+    private static <T> T complete(ListenableFuture<T> future) {
+        try {
+            return future.get();
+        } catch (InterruptedException e) {
+            throw new ZendeskException(e.getMessage(), e);
+        } catch (ExecutionException e) {
+            if (e.getCause() instanceof ZendeskException) {
+                throw (ZendeskException) e.getCause();
+            }
+            throw new ZendeskException(e.getMessage(), e);
+        }
+    }
+
+    private static void checkHasId(Ticket ticket) {
+        if (ticket.getId() == null) {
+            throw new IllegalArgumentException("Ticket requires id");
+        }
+    }
+
+    private static void checkHasId(org.zendesk.client.v2.model.Request request) {
+        if (request.getId() == null) {
+            throw new IllegalArgumentException("Request requires id");
+        }
+    }
+
+    private static void checkHasId(Audit audit) {
+        if (audit.getId() == null) {
+            throw new IllegalArgumentException("Audit requires id");
+        }
+    }
+
+    private static void checkHasId(Comment comment) {
+        if (comment.getId() == null) {
+            throw new IllegalArgumentException("Comment requires id");
+        }
+    }
+
+    private static void checkHasId(Field field) {
+        if (field.getId() == null) {
+            throw new IllegalArgumentException("Field requires id");
+        }
+    }
+
+    private static void checkHasId(Attachment attachment) {
+        if (attachment.getId() == null) {
+            throw new IllegalArgumentException("Attachment requires id");
+        }
+    }
+
+    private static void checkHasId(User user) {
+        if (user.getId() == null) {
+            throw new IllegalArgumentException("User requires id");
+        }
+    }
+
+    private static void checkHasId(Identity identity) {
+        if (identity.getId() == null) {
+            throw new IllegalArgumentException("Identity requires id");
+        }
+    }
+
+    private static void checkHasId(Organization organization) {
+        if (organization.getId() == null) {
+            throw new IllegalArgumentException("Organization requires id");
+        }
+    }
+
+    private static void checkHasId(Group group) {
+        if (group.getId() == null) {
+            throw new IllegalArgumentException("Group requires id");
+        }
+    }
+
+    private static void checkHasId(GroupMembership groupMembership) {
+        if (groupMembership.getId() == null) {
+            throw new IllegalArgumentException("GroupMembership requires id");
+        }
+    }
+
+    private static void checkHasId(Article article) {
+        if (article.getId() == null) {
+            throw new IllegalArgumentException("Article requires id");
+        }
+    }
+
+    private static void checkHasSectionId(Article article) {
+        if (article.getSectionId() == null) {
+            throw new IllegalArgumentException("Article requires section id");
+        }
+    }
+
+    private static void checkHasId(Category category) {
+        if (category.getId() == null) {
+            throw new IllegalArgumentException("Category requires id");
+        }
+    }
+
+    private static void checkHasId(Section section) {
+        if (section.getId() == null) {
+            throw new IllegalArgumentException("Section requires id");
+        }
+    }
+
+    private static void checkHasId(SuspendedTicket ticket) {
+        if (ticket == null || ticket.getId() == null) {
+            throw new IllegalArgumentException("SuspendedTicket requires id");
+        }
+    }
+
+    private static void checkHasToken(Attachment.Upload upload) {
+        if (upload.getToken() == null) {
+            throw new IllegalArgumentException("Upload requires token");
+        }
+    }
+
+    private static List<Long> idArray(long id, long... ids) {
+        List<Long> result = new ArrayList<Long>(ids.length + 1);
+        result.add(id);
+        for (long i : ids) {
+            result.add(i);
+        }
+        return result;
+    }
+
+    private static List<String> statusArray(Status... statuses) {
+        List<String> result = new ArrayList<String>(statuses.length);
+        for (Status s : statuses) {
+            result.add(s.toString());
+        }
+        return result;
+    }
+
+    public static ObjectMapper createMapper() {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);
+        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);
+        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
+        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
+        return mapper;
+    }
 
     public boolean isClosed() {
         return closed || client.isClosed();
@@ -177,16 +339,13 @@ public class Zendesk implements Closeable {
         closed = true;
     }
 
-    //////////////////////////////////////////////////////////////////////
-    // Action methods
-    //////////////////////////////////////////////////////////////////////
-
     public <T> JobStatus<T> getJobStatus(JobStatus<T> status) {
         return complete(getJobStatusAsync(status));
     }
 
     public <T> ListenableFuture<JobStatus<T>> getJobStatusAsync(JobStatus<T> status) {
-        return submit(req("GET", tmpl("/job_statuses/{id}.json").set("id", status.getId())), handleJobStatus(status.getResultsClass()));
+        return submit(req("GET", tmpl("/job_statuses/{id}.json").set("id", status.getId())),
+                handleJobStatus(status.getResultsClass()));
     }
 
     public List<JobStatus<HashMap<String, Object>>> getJobStatuses(List<JobStatus> statuses) {
@@ -198,8 +357,10 @@ public class Zendesk implements Closeable {
         for (JobStatus status : statuses) {
             ids.add(status.getId());
         }
-        Class<JobStatus<HashMap<String, Object>>> clazz = (Class<JobStatus<HashMap<String, Object>>>)(Object)JobStatus.class;
-        return submit(req("GET", tmpl("/job_statuses/show_many.json{?ids}").set("ids", ids)), handleList(clazz, "job_statuses"));
+        Class<JobStatus<HashMap<String, Object>>> clazz =
+                (Class<JobStatus<HashMap<String, Object>>>) (Object) JobStatus.class;
+        return submit(req("GET", tmpl("/job_statuses/show_many.json{?ids}").set("ids", ids)),
+                handleList(clazz, "job_statuses"));
     }
 
     public TicketForm getTicketForm(long id) {
@@ -211,7 +372,7 @@ public class Zendesk implements Closeable {
         return complete(submit(req("GET", cnst("/ticket_forms.json")), handleList(TicketForm.class,
                 "ticket_forms")));
     }
-    
+
     public Ticket getTicket(long id) {
         return complete(submit(req("GET", tmpl("/tickets/{id}.json").set("id", id)), handle(Ticket.class,
                 "ticket")));
@@ -238,7 +399,7 @@ public class Zendesk implements Closeable {
 
     public Ticket createTicket(Ticket ticket) {
         return complete(submit(req("POST", cnst("/tickets.json"),
-                        JSON, json(Collections.singletonMap("ticket", ticket))),
+                JSON, json(Collections.singletonMap("ticket", ticket))),
                 handle(Ticket.class, "ticket")));
     }
 
@@ -258,7 +419,7 @@ public class Zendesk implements Closeable {
     public Ticket updateTicket(Ticket ticket) {
         checkHasId(ticket);
         return complete(submit(req("PUT", tmpl("/tickets/{id}.json").set("id", ticket.getId()),
-                        JSON, json(Collections.singletonMap("ticket", ticket))),
+                JSON, json(Collections.singletonMap("ticket", ticket))),
                 handle(Ticket.class, "ticket")));
     }
 
@@ -286,13 +447,15 @@ public class Zendesk implements Closeable {
     }
 
     public Iterable<Ticket> getTicketsByExternalId(String externalId, boolean includeArchived) {
-        Iterable<Ticket> results = new PagedIterable<Ticket>(tmpl("/tickets.json{?external_id}").set("external_id", externalId),
-                handleList(Ticket.class, "tickets"));
+        Iterable<Ticket> results =
+                new PagedIterable<Ticket>(tmpl("/tickets.json{?external_id}").set("external_id", externalId),
+                        handleList(Ticket.class, "tickets"));
 
         if (!includeArchived || results.iterator().hasNext()) {
             return results;
         }
-        return new PagedIterable<Ticket>(tmpl("/search.json{?query}{&type}").set("query", "external_id:" + externalId).set("type", "ticket"),
+        return new PagedIterable<Ticket>(
+                tmpl("/search.json{?query}{&type}").set("query", "external_id:" + externalId).set("type", "ticket"),
                 handleList(Ticket.class, "results"));
     }
 
@@ -328,19 +491,19 @@ public class Zendesk implements Closeable {
     public Iterable<Ticket> getRecentTickets() {
         return new PagedIterable<Ticket>(cnst("/tickets/recent.json"), handleList(Ticket.class, "tickets"));
     }
-    
+
     public Iterable<Ticket> getTicketsIncrementally(Date startTime) {
         return new PagedIterable<Ticket>(
-                tmpl("/incremental/tickets.json{?start_time}").set("start_time", msToSeconds(startTime.getTime())), 
-                handleIncrementalList(Ticket.class, "tickets"));                
+                tmpl("/incremental/tickets.json{?start_time}").set("start_time", msToSeconds(startTime.getTime())),
+                handleIncrementalList(Ticket.class, "tickets"));
     }
-    
+
     public Iterable<Ticket> getTicketsIncrementally(Date startTime, Date endTime) {
         return new PagedIterable<Ticket>(
                 tmpl("/incremental/tickets.json{?start_time,end_time}")
-                    .set("start_time", msToSeconds(startTime.getTime()))
-                    .set("end_time", msToSeconds(endTime.getTime())), 
-                    handleIncrementalList(Ticket.class, "tickets"));                
+                        .set("start_time", msToSeconds(startTime.getTime()))
+                        .set("end_time", msToSeconds(endTime.getTime())),
+                handleIncrementalList(Ticket.class, "tickets"));
     }
 
     public Iterable<Ticket> getOrganizationTickets(long organizationId) {
@@ -364,11 +527,13 @@ public class Zendesk implements Closeable {
     }
 
     public Metric getTicketMetricByTicket(long id) {
-        return complete(submit(req("GET", tmpl("/tickets/{ticketId}/metrics.json").set("ticketId", id)), handle(Metric.class, "ticket_metric")));
+        return complete(submit(req("GET", tmpl("/tickets/{ticketId}/metrics.json").set("ticketId", id)),
+                handle(Metric.class, "ticket_metric")));
     }
 
     public Metric getTicketMetric(long id) {
-        return complete(submit(req("GET", tmpl("/ticket_metrics/{ticketMetricId}.json").set("ticketMetricId", id)), handle(Metric.class, "ticket_metric")));
+        return complete(submit(req("GET", tmpl("/ticket_metrics/{ticketMetricId}.json").set("ticketMetricId", id)),
+                handle(Metric.class, "ticket_metric")));
     }
 
     public Iterable<Audit> getTicketAudits(Ticket ticket) {
@@ -393,8 +558,8 @@ public class Zendesk implements Closeable {
 
     public Audit getTicketAudit(long ticketId, long auditId) {
         return complete(submit(req("GET",
-                        tmpl("/tickets/{ticketId}/audits/{auditId}.json").set("ticketId", ticketId)
-                                .set("auditId", auditId)),
+                tmpl("/tickets/{ticketId}/audits/{auditId}.json").set("ticketId", ticketId)
+                        .set("auditId", auditId)),
                 handle(Audit.class, "audit")));
     }
 
@@ -460,7 +625,7 @@ public class Zendesk implements Closeable {
 
     public Iterable<SuspendedTicket> getSuspendedTickets() {
         return new PagedIterable<SuspendedTicket>(cnst("/suspended_tickets.json"),
-            handleList(SuspendedTicket.class, "suspended_tickets"));
+                handleList(SuspendedTicket.class, "suspended_tickets"));
     }
 
     public void deleteSuspendedTicket(SuspendedTicket ticket) {
@@ -490,17 +655,19 @@ public class Zendesk implements Closeable {
                         content), handle(Attachment.Upload.class, "upload")));
     }
 
-  public void associateAttachmentsToArticle(String idArticle, List<Attachment> attachments) {
+    public void associateAttachmentsToArticle(String idArticle, List<Attachment> attachments) {
         TemplateUri uri = tmpl("/help_center/articles/{article_id}/bulk_attachments.json").set("article_id", idArticle);
         List<Long> attachmentsIds = new ArrayList<Long>();
-        for(Attachment item : attachments){
+        for (Attachment item : attachments) {
             attachmentsIds.add(item.getId());
         }
-        complete(submit(req("POST", uri, JSON, json(Collections.singletonMap("attachment_ids", attachmentsIds))), handleStatus()));
+        complete(submit(req("POST", uri, JSON, json(Collections.singletonMap("attachment_ids", attachmentsIds))),
+                handleStatus()));
     }
-   
-  public ArticleAttachments createUploadArticle(long articleId, File file) throws IOException {
-        BoundRequestBuilder builder = client.preparePost(tmpl("/help_center/articles/{id}/attachments.json").set("id", articleId).toString());
+
+    public ArticleAttachments createUploadArticle(long articleId, File file) throws IOException {
+        BoundRequestBuilder builder =
+                client.preparePost(tmpl("/help_center/articles/{id}/attachments.json").set("id", articleId).toString());
         if (realm != null) {
             builder.setRealm(realm);
         } else {
@@ -508,11 +675,11 @@ public class Zendesk implements Closeable {
         }
         builder.setHeader("Content-Type", "multipart/form-data");
         builder.addBodyPart(
-            new FilePart("file", file, "application/octet-stream", Charset.forName("UTF-8"), file.getName()));
+                new FilePart("file", file, "application/octet-stream", Charset.forName("UTF-8"), file.getName()));
         final Request req = builder.build();
         return complete(submit(req, handle(ArticleAttachments.class, "article_attachment")));
     }
-  
+
     public void deleteUpload(Attachment.Upload upload) {
         checkHasToken(upload);
         deleteUpload(upload.getToken());
@@ -546,82 +713,83 @@ public class Zendesk implements Closeable {
     }
 
     public Target getTarget(long id) {
-       return complete(submit(req("GET", tmpl("/targets/{id}.json").set("id", id)), handle(Target.class, "target")));
+        return complete(submit(req("GET", tmpl("/targets/{id}.json").set("id", id)), handle(Target.class, "target")));
     }
-    
+
     public Target createTarget(Target target) {
-        return complete(submit(req("POST", cnst("/targets.json"), JSON, json(Collections.singletonMap("target", target))),
-              handle(Target.class, "target")));
+        return complete(
+                submit(req("POST", cnst("/targets.json"), JSON, json(Collections.singletonMap("target", target))),
+                        handle(Target.class, "target")));
     }
- 
-    public void deleteTarget(long targetId) { 
-       complete(submit(req("DELETE", tmpl("/targets/{id}.json").set("id", targetId)), handleStatus()));
+
+    public void deleteTarget(long targetId) {
+        complete(submit(req("DELETE", tmpl("/targets/{id}.json").set("id", targetId)), handleStatus()));
     }
-    
+
     public Iterable<Trigger> getTriggers() {
         return new PagedIterable<Trigger>(cnst("/triggers.json"), handleList(Trigger.class, "triggers"));
     }
 
     public Trigger getTrigger(long id) {
-       return complete(submit(req("GET", tmpl("/triggers/{id}.json").set("id", id)), handle(Trigger.class, "trigger")));
+        return complete(
+                submit(req("GET", tmpl("/triggers/{id}.json").set("id", id)), handle(Trigger.class, "trigger")));
     }
-    
+
     public Trigger createTrigger(Trigger trigger) {
-        return complete(submit(req("POST", cnst("/triggers.json"), JSON, json(Collections.singletonMap("trigger", trigger))),
-              handle(Trigger.class, "trigger")));
+        return complete(
+                submit(req("POST", cnst("/triggers.json"), JSON, json(Collections.singletonMap("trigger", trigger))),
+                        handle(Trigger.class, "trigger")));
     }
-    
+
     public Trigger updateTrigger(Long triggerId, Trigger trigger) {
-      return complete(submit(req("PUT", tmpl("/triggers/{id}.json").set("id", triggerId), JSON, json(Collections.singletonMap("trigger", trigger))),
-            handle(Trigger.class, "trigger")));
-  }
-
-    public void deleteTrigger(long triggerId) { 
-       complete(submit(req("DELETE", tmpl("/triggers/{id}.json").set("id", triggerId)), handleStatus()));
-    }
-    
-
-  // Automations
-  public Iterable<Automation> getAutomations() {
-    return new PagedIterable<Automation>(cnst("/automations.json"),
-        handleList(Automation.class, "automations"));
-  }
-
-  public Automation getAutomation(long id) {
-    return complete(submit(req("GET", tmpl("/automations/{id}.json").set("id", id)),
-        handle(Automation.class, "automation")));
-  }
-
-  public Automation createAutomation(Automation automation) {
-    return complete(submit(
-        req("POST", cnst("/automations.json"), JSON,
-            json(Collections.singletonMap("automation", automation))),
-        handle(Automation.class, "automation")));
-  }
-
-  public Automation updateAutomation(Long automationId, Automation automation) {
-    return complete(submit(
-        req("PUT", tmpl("/automations/{id}.json").set("id", automationId), JSON,
-            json(Collections.singletonMap("automation", automation))),
-        handle(Automation.class, "automation")));
-  }
-
-  public void deleteAutomation(long automationId) {
-    complete(submit(req("DELETE", tmpl("/automations/{id}.json").set("id", automationId)),
-        handleStatus()));
-  }
-
-    
-    public Iterable<TwitterMonitor> getTwitterMonitors() { 
-        return new PagedIterable<TwitterMonitor>(cnst("/channels/twitter/monitored_twitter_handles.json"),  
-              handleList(TwitterMonitor.class, "monitored_twitter_handles"));
-    }
-
-    
+        return complete(submit(req("PUT", tmpl("/triggers/{id}.json").set("id", triggerId), JSON,
+                json(Collections.singletonMap("trigger", trigger))),
+                handle(Trigger.class, "trigger")));
+    }
+
+    public void deleteTrigger(long triggerId) {
+        complete(submit(req("DELETE", tmpl("/triggers/{id}.json").set("id", triggerId)), handleStatus()));
+    }
+
+    // Automations
+    public Iterable<Automation> getAutomations() {
+        return new PagedIterable<Automation>(cnst("/automations.json"),
+                handleList(Automation.class, "automations"));
+    }
+
+    public Automation getAutomation(long id) {
+        return complete(submit(req("GET", tmpl("/automations/{id}.json").set("id", id)),
+                handle(Automation.class, "automation")));
+    }
+
+    public Automation createAutomation(Automation automation) {
+        return complete(submit(
+                req("POST", cnst("/automations.json"), JSON,
+                        json(Collections.singletonMap("automation", automation))),
+                handle(Automation.class, "automation")));
+    }
+
+    public Automation updateAutomation(Long automationId, Automation automation) {
+        return complete(submit(
+                req("PUT", tmpl("/automations/{id}.json").set("id", automationId), JSON,
+                        json(Collections.singletonMap("automation", automation))),
+                handle(Automation.class, "automation")));
+    }
+
+    public void deleteAutomation(long automationId) {
+        complete(submit(req("DELETE", tmpl("/automations/{id}.json").set("id", automationId)),
+                handleStatus()));
+    }
+
+    public Iterable<TwitterMonitor> getTwitterMonitors() {
+        return new PagedIterable<TwitterMonitor>(cnst("/channels/twitter/monitored_twitter_handles.json"),
+                handleList(TwitterMonitor.class, "monitored_twitter_handles"));
+    }
+
     public Iterable<User> getUsers() {
         return new PagedIterable<User>(cnst("/users.json"), handleList(User.class, "users"));
     }
-    
+
     public Iterable<User> getUsersByRole(String role, String... roles) {
         // Going to have to build this URI manually, because the RFC6570 template spec doesn't support
         // variables like ?role[]=...role[]=..., which is what Zendesk requires.
@@ -640,8 +808,8 @@ public class Zendesk implements Closeable {
 
     public Iterable<User> getUsersIncrementally(Date startTime) {
         return new PagedIterable<User>(
-              tmpl("/incremental/users.json{?start_time}").set("start_time", msToSeconds(startTime.getTime())), 
-              handleIncrementalList(User.class, "users"));                
+                tmpl("/incremental/users.json{?start_time}").set("start_time", msToSeconds(startTime.getTime())),
+                handleIncrementalList(User.class, "users"));
     }
 
     public Iterable<User> getGroupUsers(long id) {
@@ -770,8 +938,8 @@ public class Zendesk implements Closeable {
 
     public List<Identity> setUserPrimaryIdentity(long userId, long identityId) {
         return complete(submit(req("PUT",
-                        tmpl("/users/{userId}/identities/{identityId}/make_primary.json").set("userId", userId)
-                                .set("identityId", identityId), JSON, null),
+                tmpl("/users/{userId}/identities/{identityId}/make_primary.json").set("userId", userId)
+                        .set("identityId", identityId), JSON, null),
                 handleList(Identity.class, "identities")));
     }
 
@@ -785,6 +953,8 @@ public class Zendesk implements Closeable {
         return verifyUserIdentity(user.getId(), identityId);
     }
 
+    // TODO getOrganizationRelatedInformation
+
     public Identity verifyUserIdentity(long userId, long identityId) {
         return complete(submit(req("PUT", tmpl("/users/{userId}/identities/{identityId}/verify.json")
                 .set("userId", userId)
@@ -819,8 +989,8 @@ public class Zendesk implements Closeable {
 
     public void deleteUserIdentity(long userId, long identityId) {
         complete(submit(req("DELETE", tmpl("/users/{userId}/identities/{identityId}.json")
-                        .set("userId", userId)
-                        .set("identityId", identityId)
+                .set("userId", userId)
+                .set("identityId", identityId)
         ), handleStatus()));
     }
 
@@ -871,14 +1041,14 @@ public class Zendesk implements Closeable {
 
     public org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request) {
         return complete(submit(req("POST", cnst("/requests.json"),
-                        JSON, json(Collections.singletonMap("request", request))),
+                JSON, json(Collections.singletonMap("request", request))),
                 handle(org.zendesk.client.v2.model.Request.class, "request")));
     }
 
     public org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request) {
         checkHasId(request);
         return complete(submit(req("PUT", tmpl("/requests/{id}.json").set("id", request.getId()),
-                        JSON, json(Collections.singletonMap("request", request))),
+                JSON, json(Collections.singletonMap("request", request))),
                 handle(org.zendesk.client.v2.model.Request.class, "request")));
     }
 
@@ -917,21 +1087,21 @@ public class Zendesk implements Closeable {
     public Ticket createComment(long ticketId, Comment comment) {
         Ticket ticket = new Ticket();
         ticket.setComment(comment);
-        return complete(submit(req("PUT", tmpl("/tickets/{id}.json").set("id", ticketId), JSON,              
-              json(Collections.singletonMap("ticket", ticket))),
-              handle(Ticket.class, "ticket")));
-    }    
-
-    public Ticket createTicketFromTweet(long tweetId, long monitorId) { 
-       Map<String,Object> map = new HashMap<String,Object>();
-       map.put("twitter_status_message_id", tweetId);
-       map.put("monitored_twitter_handle_id", monitorId);
-      
-       return complete(submit(req("POST", cnst("/channels/twitter/tickets.json"), JSON,              
-             json(Collections.singletonMap("ticket", map))),
-             handle(Ticket.class, "ticket")));
-    }
-    
+        return complete(submit(req("PUT", tmpl("/tickets/{id}.json").set("id", ticketId), JSON,
+                json(Collections.singletonMap("ticket", ticket))),
+                handle(Ticket.class, "ticket")));
+    }
+
+    public Ticket createTicketFromTweet(long tweetId, long monitorId) {
+        Map<String, Object> map = new HashMap<String, Object>();
+        map.put("twitter_status_message_id", tweetId);
+        map.put("monitored_twitter_handle_id", monitorId);
+
+        return complete(submit(req("POST", cnst("/channels/twitter/tickets.json"), JSON,
+                json(Collections.singletonMap("ticket", map))),
+                handle(Ticket.class, "ticket")));
+    }
+
     public Iterable<Organization> getOrganizations() {
         return new PagedIterable<Organization>(cnst("/organizations.json"),
                 handleList(Organization.class, "organizations"));
@@ -939,8 +1109,9 @@ public class Zendesk implements Closeable {
 
     public Iterable<Organization> getOrganizationsIncrementally(Date startTime) {
         return new PagedIterable<Organization>(
-            tmpl("/incremental/organizations.json{?start_time}").set("start_time", msToSeconds(startTime.getTime())), 
-            handleIncrementalList(Organization.class, "organizations"));
+                tmpl("/incremental/organizations.json{?start_time}")
+                        .set("start_time", msToSeconds(startTime.getTime())),
+                handleIncrementalList(Organization.class, "organizations"));
     }
 
     public Iterable<OrganizationField> getOrganizationFields() {
@@ -957,8 +1128,6 @@ public class Zendesk implements Closeable {
                 handleList(Organization.class, "organizations"));
     }
 
-    // TODO getOrganizationRelatedInformation
-
     public Organization getOrganization(long id) {
         return complete(submit(req("GET", tmpl("/organizations/{id}.json").set("id", id)),
                 handle(Organization.class, "organization")));
@@ -1050,27 +1219,26 @@ public class Zendesk implements Closeable {
         complete(submit(req("DELETE", tmpl("/groups/{id}.json").set("id", id)), handleStatus()));
     }
 
-    public Iterable<Macro> getMacros(){
+    public Iterable<Macro> getMacros() {
         return new PagedIterable<Macro>(cnst("/macros.json"),
                 handleList(Macro.class, "macros"));
     }
-    
-    public Macro getMacro(long macroId){
-      
-      return complete(submit(req("GET", tmpl("/macros/{id}.json").set("id", macroId)), handle(Macro.class, "macro")));
-  }
-    
-  public Macro createMacro(Macro macro) {
-    return complete(submit(
-        req("POST", cnst("/macros.json"), JSON, json(Collections.singletonMap("macro", macro))),
-        handle(Macro.class, "macro")));
-  }
-
-  public Macro updateMacro(Long macroId, Macro macro) {
-    return complete(submit(req("PUT", tmpl("/macros/{id}.json").set("id", macroId), JSON,
-        json(Collections.singletonMap("macro", macro))), handle(Macro.class, "macro")));
-  }
-    
+
+    public Macro getMacro(long macroId) {
+
+        return complete(submit(req("GET", tmpl("/macros/{id}.json").set("id", macroId)), handle(Macro.class, "macro")));
+    }
+
+    public Macro createMacro(Macro macro) {
+        return complete(submit(
+                req("POST", cnst("/macros.json"), JSON, json(Collections.singletonMap("macro", macro))),
+                handle(Macro.class, "macro")));
+    }
+
+    public Macro updateMacro(Long macroId, Macro macro) {
+        return complete(submit(req("PUT", tmpl("/macros/{id}.json").set("id", macroId), JSON,
+                json(Collections.singletonMap("macro", macro))), handle(Macro.class, "macro")));
+    }
 
     public Ticket macrosShowChangesToTicket(long macroId) {
         return complete(submit(req("GET", tmpl("/macros/{id}/apply.json").set("id", macroId)),
@@ -1176,9 +1344,16 @@ public class Zendesk implements Closeable {
                 handleList(GroupMembership.class, "group_memberships"));
     }
 
+    // TODO search with sort order
+    // TODO search with query building API
+
+    //////////////////////////////////////////////////////////////////////
+    // Action methods for Help Center
+    //////////////////////////////////////////////////////////////////////
+
     public List<GroupMembership> getAssignableGroupMemberships(long group_id) {
         return complete(submit(req("GET",
-                        tmpl("/groups/{group_id}/memberships/assignable.json").set("group_id", group_id)),
+                tmpl("/groups/{group_id}/memberships/assignable.json").set("group_id", group_id)),
                 handleList(GroupMembership.class, "group_memberships")));
     }
 
@@ -1195,13 +1370,13 @@ public class Zendesk implements Closeable {
 
     public GroupMembership createGroupMembership(GroupMembership groupMembership) {
         return complete(submit(req("POST", cnst("/group_memberships.json"), JSON, json(
-                        Collections.singletonMap("group_membership", groupMembership))),
+                Collections.singletonMap("group_membership", groupMembership))),
                 handle(GroupMembership.class, "group_membership")));
     }
 
     public GroupMembership createGroupMembership(long user_id, GroupMembership groupMembership) {
         return complete(submit(req("POST", tmpl("/users/{id}/group_memberships.json").set("id", user_id), JSON,
-                        json(Collections.singletonMap("group_membership", groupMembership))),
+                json(Collections.singletonMap("group_membership", groupMembership))),
                 handle(GroupMembership.class, "group_membership")));
     }
 
@@ -1228,7 +1403,7 @@ public class Zendesk implements Closeable {
         checkHasId(groupMembership);
         return complete(submit(req("POST", tmpl("/users/{uid}/group_memberships/{gmid}/make_default.json")
                         .set("uid", user_id).set("gmid", groupMembership.getId()), JSON, json(
-                        Collections.singletonMap("group_memberships", groupMembership))),
+                Collections.singletonMap("group_memberships", groupMembership))),
                 handleList(GroupMembership.class, "results")));
     }
 
@@ -1298,6 +1473,10 @@ public class Zendesk implements Closeable {
                 handleList(Topic.class, "topics")));
     }
 
+    //////////////////////////////////////////////////////////////////////
+    // Helper methods
+    //////////////////////////////////////////////////////////////////////
+
     public Topic updateTopic(Topic topic) {
         checkHasId(topic);
         return complete(submit(req("PUT", tmpl("/topics/{id}.json").set("id", topic.getId()), JSON, json(
@@ -1334,22 +1513,16 @@ public class Zendesk implements Closeable {
                 .set("params", params),
                 handleList(type, "results"));
     }
-    
+
     public void notifyApp(String json) {
-       complete(submit(req("POST", cnst("/apps/notify.json"), JSON, json.getBytes()), handleStatus()));
+        complete(submit(req("POST", cnst("/apps/notify.json"), JSON, json.getBytes()), handleStatus()));
     }
-    
+
     public void updateInstallation(int id, String json) {
-       complete(submit(req("PUT", tmpl("/apps/installations/{id}.json").set("id", id), JSON, json.getBytes()), handleStatus()));
+        complete(submit(req("PUT", tmpl("/apps/installations/{id}.json").set("id", id), JSON, json.getBytes()),
+                handleStatus()));
     }
 
-    // TODO search with sort order
-    // TODO search with query building API
-
-    //////////////////////////////////////////////////////////////////////
-    // Action methods for Help Center
-    //////////////////////////////////////////////////////////////////////
-
     /**
      * Get all articles from help center.
      *
@@ -1361,10 +1534,10 @@ public class Zendesk implements Closeable {
     }
 
     public Iterable<Article> getArticlesIncrementally(Date startTime) {
-      return new PagedIterable<Article>(
-          tmpl("/help_center/incremental/articles.json{?start_time}")
-              .set("start_time", msToSeconds(startTime.getTime())),
-          handleIncrementalList(Article.class, "articles")); 
+        return new PagedIterable<Article>(
+                tmpl("/help_center/incremental/articles.json{?start_time}")
+                        .set("start_time", msToSeconds(startTime.getTime())),
+                handleIncrementalList(Article.class, "articles"));
     }
 
     public List<Article> getArticlesFromPage(int page) {
@@ -1379,13 +1552,15 @@ public class Zendesk implements Closeable {
 
     public Iterable<Translation> getArticleTranslations(Long articleId) {
         return new PagedIterable<Translation>(
-            tmpl("/help_center/articles/{articleId}/translations.json").set("articleId", articleId),
-            handleList(Translation.class, "translations"));
+                tmpl("/help_center/articles/{articleId}/translations.json").set("articleId", articleId),
+                handleList(Translation.class, "translations"));
     }
+
     public Article createArticle(Article article) {
         checkHasSectionId(article);
-        return complete(submit(req("POST", tmpl("/help_center/sections/{id}/articles.json").set("id", article.getSectionId()),
-                JSON, json(Collections.singletonMap("article", article))), handle(Article.class, "article")));
+        return complete(
+                submit(req("POST", tmpl("/help_center/sections/{id}/articles.json").set("id", article.getSectionId()),
+                        JSON, json(Collections.singletonMap("article", article))), handle(Article.class, "article")));
     }
 
     public Article updateArticle(Article article) {
@@ -1402,7 +1577,8 @@ public class Zendesk implements Closeable {
 
     /**
      * Delete attachment from article.
-     * @param attachment 
+     *
+     * @param attachment
      */
     public void deleteArticleAttachment(ArticleAttachments attachment) {
         if (attachment.getId() == 0) {
@@ -1413,12 +1589,14 @@ public class Zendesk implements Closeable {
 
     /**
      * Delete attachment from article.
-     * @param id attachment identifier. 
+     *
+     * @param id attachment identifier.
      */
     public void deleteArticleAttachment(long id) {
-        complete(submit(req("DELETE", tmpl("/help_center/articles/attachments/{id}.json").set("id", id)), handleStatus()));
+        complete(submit(req("DELETE", tmpl("/help_center/articles/attachments/{id}.json").set("id", id)),
+                handleStatus()));
     }
-    
+
     public List<Category> getCategories() {
         return complete(submit(req("GET", cnst("/help_center/categories.json")),
                 handleList(Category.class, "categories")));
@@ -1431,9 +1609,10 @@ public class Zendesk implements Closeable {
 
     public Iterable<Translation> getCategoryTranslations(Long categoryId) {
         return new PagedIterable<Translation>(
-            tmpl("/help_center/categories/{categoryId}/translations.json").set("categoryId", categoryId),
-            handleList(Translation.class, "translations"));
+                tmpl("/help_center/categories/{categoryId}/translations.json").set("categoryId", categoryId),
+                handleList(Translation.class, "translations"));
     }
+
     public Category createCategory(Category category) {
         return complete(submit(req("POST", cnst("/help_center/categories.json"),
                 JSON, json(Collections.singletonMap("category", category))), handle(Category.class, "category")));
@@ -1457,8 +1636,9 @@ public class Zendesk implements Closeable {
 
     public List<Section> getSections(Category category) {
         checkHasId(category);
-        return complete(submit(req("GET", tmpl("/help_center/categories/{id}/sections.json").set("id", category.getId())),
-                handleList(Section.class, "sections")));
+        return complete(
+                submit(req("GET", tmpl("/help_center/categories/{id}/sections.json").set("id", category.getId())),
+                        handleList(Section.class, "sections")));
     }
 
     public Section getSection(int id) {
@@ -1468,9 +1648,10 @@ public class Zendesk implements Closeable {
 
     public Iterable<Translation> getSectionTranslations(Long sectionId) {
         return new PagedIterable<Translation>(
-            tmpl("/help_center/sections/{sectionId}/translations.json").set("sectionId", sectionId),
-            handleList(Translation.class, "translations"));
+                tmpl("/help_center/sections/{sectionId}/translations.json").set("sectionId", sectionId),
+                handleList(Translation.class, "translations"));
     }
+
     public Section createSection(Section section) {
         return complete(submit(req("POST", cnst("/help_center/sections.json"), JSON,
                 json(Collections.singletonMap("section", section))), handle(Section.class, "section")));
@@ -1488,10 +1669,6 @@ public class Zendesk implements Closeable {
                 handleStatus()));
     }
 
-    //////////////////////////////////////////////////////////////////////
-    // Helper methods
-    //////////////////////////////////////////////////////////////////////
-
     private byte[] json(Object object) {
         try {
             return mapper.writeValueAsBytes(object);
@@ -1500,6 +1677,10 @@ public class Zendesk implements Closeable {
         }
     }
 
+    //////////////////////////////////////////////////////////////////////
+    // Static helper methods
+    //////////////////////////////////////////////////////////////////////
+
     private <T> ListenableFuture<T> submit(Request request, ZendeskAsyncCompletionHandler<T> handler) {
         if (logger.isDebugEnabled()) {
             if (request.getStringData() != null) {
@@ -1514,23 +1695,10 @@ public class Zendesk implements Closeable {
         return client.executeRequest(request, handler);
     }
 
-    private static abstract class ZendeskAsyncCompletionHandler<T> extends AsyncCompletionHandler<T> {
-        @Override
-        public void onThrowable(Throwable t) {
-            if (t instanceof IOException) {
-                throw new ZendeskException(t);
-            } else {
-                super.onThrowable(t);
-            }
-        }
-    }
-
     private Request req(String method, Uri template) {
         return req(method, template.toString());
     }
 
-    private static final Pattern RESTRICTED_PATTERN = Pattern.compile("%2B", Pattern.LITERAL);
-
     private Request req(String method, String url) {
         RequestBuilder builder = new RequestBuilder(method);
         if (realm != null) {
@@ -1538,7 +1706,8 @@ public class Zendesk implements Closeable {
         } else {
             builder.addHeader("Authorization", "Bearer " + oauthToken);
         }
-        builder.setUrl(RESTRICTED_PATTERN.matcher(url).replaceAll("+")); // replace out %2B with + due to API restriction
+        builder.setUrl(
+                RESTRICTED_PATTERN.matcher(url).replaceAll("+")); // replace out %2B with + due to API restriction
         return builder.build();
     }
 
@@ -1549,7 +1718,8 @@ public class Zendesk implements Closeable {
         } else {
             builder.addHeader("Authorization", "Bearer " + oauthToken);
         }
-        builder.setUrl(RESTRICTED_PATTERN.matcher(template.toString()).replaceAll("+")); //replace out %2B with + due to API restriction
+        builder.setUrl(RESTRICTED_PATTERN.matcher(template.toString())
+                .replaceAll("+")); //replace out %2B with + due to API restriction
         builder.addHeader("Content-type", contentType);
         builder.setBody(body);
         return builder.build();
@@ -1585,35 +1755,8 @@ public class Zendesk implements Closeable {
         };
     }
 
-    private class BasicAsyncCompletionHandler<T> extends ZendeskAsyncCompletionHandler<T> {
-        private final Class<T> clazz;
-        private final String name;
-        private final Class[] typeParams;
-
-        public BasicAsyncCompletionHandler(Class clazz, String name, Class... typeParams) {
-            this.clazz = clazz;
-            this.name = name;
-            this.typeParams = typeParams;
-        }
-
-        @Override
-        public T onCompleted(Response response) throws Exception {
-            logResponse(response);
-            if (isStatus2xx(response)) {
-                if (typeParams.length > 0) {
-                    JavaType type = mapper.getTypeFactory().constructParametricType(clazz, typeParams);
-                    return mapper.convertValue(mapper.readTree(response.getResponseBodyAsStream()).get(name), type);
-                }
-                return mapper.convertValue(mapper.readTree(response.getResponseBodyAsStream()).get(name), clazz);
-            }
-            if (response.getStatusCode() == 404) {
-                return null;
-            }
-            throw new ZendeskResponseException(response);
-        }
-    }
-
-    protected <T> ZendeskAsyncCompletionHandler<T> handle(final Class<T> clazz, final String name, final Class... typeParams) {
+    protected <T> ZendeskAsyncCompletionHandler<T> handle(final Class<T> clazz, final String name,
+                                                          final Class... typeParams) {
         return new BasicAsyncCompletionHandler<T>(clazz, name, typeParams);
     }
 
@@ -1628,66 +1771,10 @@ public class Zendesk implements Closeable {
         };
     }
 
-    private static final String NEXT_PAGE = "next_page";
-    private static final String END_TIME = "end_time";
-    private static final String COUNT = "count";
-    private static final int INCREMENTAL_EXPORT_MAX_COUNT_BY_REQUEST = 1000;
-
-    private abstract class PagedAsyncCompletionHandler<T> extends ZendeskAsyncCompletionHandler<T> {
-        private String nextPage;
-
-        public void setPagedProperties(JsonNode responseNode, Class<?> clazz) {
-            JsonNode node = responseNode.get(NEXT_PAGE);
-            if (node == null) {
-                this.nextPage = null;
-                if (logger.isDebugEnabled()) {
-                    logger.debug(NEXT_PAGE + " property not found, pagination not supported" +
-                        (clazz != null ? " for " + clazz.getName() : ""));
-                }
-            } else {
-                this.nextPage = node.asText();
-            }
-        }
-
-        public String getNextPage() {
-            return nextPage;
-        }
-        
-        public void setNextPage(String nextPage) {
-            this.nextPage = nextPage;
-        }
-    }
-    
-    private class PagedAsyncListCompletionHandler<T> extends PagedAsyncCompletionHandler<List<T>> {
-        private final Class<T> clazz;
-        private final String name;
-        public PagedAsyncListCompletionHandler(Class<T> clazz, String name) {
-            this.clazz = clazz;
-            this.name = name;
-        }
-        
-        @Override
-        public List<T> onCompleted(Response response) throws Exception {
-            logResponse(response);
-            if (isStatus2xx(response)) {
-                JsonNode responseNode = mapper.readTree(response.getResponseBodyAsBytes());
-                setPagedProperties(responseNode, clazz);
-                List<T> values = new ArrayList<T>();
-                for (JsonNode node : responseNode.get(name)) {
-                    values.add(mapper.convertValue(node, clazz));
-                }
-                return values;
-            }
-            throw new ZendeskResponseException(response);
-        }
-    }
-
     protected <T> PagedAsyncCompletionHandler<List<T>> handleList(final Class<T> clazz, final String name) {
         return new PagedAsyncListCompletionHandler<T>(clazz, name);
     }
 
-    private static final long FIVE_MINUTES = TimeUnit.MINUTES.toMillis(5);
-
     protected <T> PagedAsyncCompletionHandler<List<T>> handleIncrementalList(final Class<T> clazz, final String name) {
         return new PagedAsyncListCompletionHandler<T>(clazz, name) {
             @Override
@@ -1696,7 +1783,7 @@ public class Zendesk implements Closeable {
                 if (node == null) {
                     if (logger.isDebugEnabled()) {
                         logger.debug(NEXT_PAGE + " property not found, pagination not supported" +
-                            (clazz != null ? " for " + clazz.getName() : ""));
+                                (clazz != null ? " for " + clazz.getName() : ""));
                     }
                     setNextPage(null);
                     return;
@@ -1705,7 +1792,7 @@ public class Zendesk implements Closeable {
                 if (endTimeNode == null || endTimeNode.asLong() == 0) {
                     if (logger.isDebugEnabled()) {
                         logger.debug(END_TIME + " property not found, incremental export pagination not supported" +
-                            (clazz != null ? " for " + clazz.getName() : ""));
+                                (clazz != null ? " for " + clazz.getName() : ""));
                     }
                     setNextPage(null);
                     return;
@@ -1717,12 +1804,13 @@ public class Zendesk implements Closeable {
                 if (TimeUnit.SECONDS.toMillis(endTimeNode.asLong()) > System.currentTimeMillis() - FIVE_MINUTES) {
                     setNextPage(null);
                 } else {
-                    // Taking into account documentation found at https://developer.zendesk.com/rest_api/docs/core/incremental_export#polling-strategy
+                    // Taking into account documentation found at https://developer.zendesk
+                    // .com/rest_api/docs/core/incremental_export#polling-strategy
                     JsonNode countNode = responseNode.get(COUNT);
                     if (countNode == null) {
                         if (logger.isDebugEnabled()) {
                             logger.debug(COUNT + " property not found, incremental export pagination not supported" +
-                                (clazz != null ? " for " + clazz.getName() : ""));
+                                    (clazz != null ? " for " + clazz.getName() : ""));
                         }
                         setNextPage(null);
                         return;
@@ -1781,7 +1869,6 @@ public class Zendesk implements Closeable {
             }
         };
     }
-    
 
     protected PagedAsyncCompletionHandler<List<ArticleAttachments>> handleArticleAttachmentsList(final String name) {
         return new PagedAsyncCompletionHandler<List<ArticleAttachments>>() {
@@ -1818,186 +1905,181 @@ public class Zendesk implements Closeable {
             logger.trace("Response headers {}", response.getHeaders());
         }
     }
-    
-    private static final String UTF_8 = "UTF-8";
-
-    private static String encodeUrl(String input) {
-        try {
-            return URLEncoder.encode(input, UTF_8);
-        } catch (UnsupportedEncodingException impossible) {
-            return input;
-        }
-    }
-
-    private static long msToSeconds(long millis) {
-        return TimeUnit.MILLISECONDS.toSeconds(millis);
-    }
 
     private boolean isStatus2xx(Response response) {
         return response.getStatusCode() / 100 == 2;
     }
 
-    //////////////////////////////////////////////////////////////////////
-    // Static helper methods
-    //////////////////////////////////////////////////////////////////////
-
-    private static <T> T complete(ListenableFuture<T> future) {
-        try {
-            return future.get();
-        } catch (InterruptedException e) {
-            throw new ZendeskException(e.getMessage(), e);
-        } catch (ExecutionException e) {
-            if (e.getCause() instanceof ZendeskException) {
-                throw (ZendeskException) e.getCause();
-            }
-            throw new ZendeskException(e.getMessage(), e);
-        }
-    }
-
-    private static void checkHasId(Ticket ticket) {
-        if (ticket.getId() == null) {
-            throw new IllegalArgumentException("Ticket requires id");
+    private void checkHasId(Forum forum) {
+        if (forum.getId() == null) {
+            throw new IllegalArgumentException("Forum requires id");
         }
     }
 
-    private static void checkHasId(org.zendesk.client.v2.model.Request request) {
-        if (request.getId() == null) {
-            throw new IllegalArgumentException("Request requires id");
+    private void checkHasId(Topic topic) {
+        if (topic.getId() == null) {
+            throw new IllegalArgumentException("Topic requires id");
         }
     }
 
-    private static void checkHasId(Audit audit) {
-        if (audit.getId() == null) {
-            throw new IllegalArgumentException("Audit requires id");
+    private static abstract class ZendeskAsyncCompletionHandler<T> extends AsyncCompletionHandler<T> {
+        @Override
+        public void onThrowable(Throwable t) {
+            if (t instanceof IOException) {
+                throw new ZendeskException(t);
+            } else {
+                super.onThrowable(t);
+            }
         }
     }
 
-    private static void checkHasId(Comment comment) {
-        if (comment.getId() == null) {
-            throw new IllegalArgumentException("Comment requires id");
-        }
-    }
+    public static class Builder {
+        private final String url;
+        private AsyncHttpClient client = null;
+        private String username = null;
+        private String password = null;
+        private String token = null;
+        private String oauthToken = null;
 
-    private static void checkHasId(Field field) {
-        if (field.getId() == null) {
-            throw new IllegalArgumentException("Field requires id");
+        public Builder(String url) {
+            this.url = url;
         }
-    }
 
-    private static void checkHasId(Attachment attachment) {
-        if (attachment.getId() == null) {
-            throw new IllegalArgumentException("Attachment requires id");
+        public Builder setClient(AsyncHttpClient client) {
+            this.client = client;
+            return this;
         }
-    }
 
-    private static void checkHasId(User user) {
-        if (user.getId() == null) {
-            throw new IllegalArgumentException("User requires id");
+        public Builder setUsername(String username) {
+            this.username = username;
+            return this;
         }
-    }
 
-    private static void checkHasId(Identity identity) {
-        if (identity.getId() == null) {
-            throw new IllegalArgumentException("Identity requires id");
+        public Builder setPassword(String password) {
+            this.password = password;
+            if (password != null) {
+                this.token = null;
+                this.oauthToken = null;
+            }
+            return this;
         }
-    }
 
-    private static void checkHasId(Organization organization) {
-        if (organization.getId() == null) {
-            throw new IllegalArgumentException("Organization requires id");
+        public Builder setToken(String token) {
+            this.token = token;
+            if (token != null) {
+                this.password = null;
+                this.oauthToken = null;
+            }
+            return this;
         }
-    }
 
-    private static void checkHasId(Group group) {
-        if (group.getId() == null) {
-            throw new IllegalArgumentException("Group requires id");
-        }
-    }
 
-    private static void checkHasId(GroupMembership groupMembership) {
-        if (groupMembership.getId() == null) {
-            throw new IllegalArgumentException("GroupMembership requires id");
+        public Builder setOauthToken(String oauthToken) {
+            this.oauthToken = oauthToken;
+            if (oauthToken != null) {
+                this.password = null;
+                this.token = null;
+            }
+            return this;
         }
-    }
 
-    private void checkHasId(Forum forum) {
-        if (forum.getId() == null) {
-            throw new IllegalArgumentException("Forum requires id");
-        }
-    }
 
-    private void checkHasId(Topic topic) {
-        if (topic.getId() == null) {
-            throw new IllegalArgumentException("Topic requires id");
+        public Builder setRetry(boolean retry) {
+            return this;
         }
-    }
 
-    private static void checkHasId(Article article) {
-        if (article.getId() == null) {
-            throw new IllegalArgumentException("Article requires id");
+        public Zendesk build() {
+            if (token != null) {
+                return new Zendesk(client, url, username + "/token", token);
+            } else if (oauthToken != null) {
+                return new Zendesk(client, url, oauthToken);
+            }
+            return new Zendesk(client, url, username, password);
         }
     }
 
-    private static void checkHasSectionId(Article article) {
-        if (article.getSectionId() == null) {
-            throw new IllegalArgumentException("Article requires section id");
-        }
-    }
+    private class BasicAsyncCompletionHandler<T> extends ZendeskAsyncCompletionHandler<T> {
+        private final Class<T> clazz;
+        private final String name;
+        private final Class[] typeParams;
 
-    private static void checkHasId(Category category) {
-        if (category.getId() == null) {
-            throw new IllegalArgumentException("Category requires id");
+        public BasicAsyncCompletionHandler(Class clazz, String name, Class... typeParams) {
+            this.clazz = clazz;
+            this.name = name;
+            this.typeParams = typeParams;
         }
-    }
 
-    private static void checkHasId(Section section) {
-        if (section.getId() == null) {
-            throw new IllegalArgumentException("Section requires id");
+        @Override
+        public T onCompleted(Response response) throws Exception {
+            logResponse(response);
+            if (isStatus2xx(response)) {
+                if (typeParams.length > 0) {
+                    JavaType type = mapper.getTypeFactory().constructParametricType(clazz, typeParams);
+                    return mapper.convertValue(mapper.readTree(response.getResponseBodyAsStream()).get(name), type);
+                }
+                return mapper.convertValue(mapper.readTree(response.getResponseBodyAsStream()).get(name), clazz);
+            }
+            if (response.getStatusCode() == 404) {
+                return null;
+            }
+            throw new ZendeskResponseException(response);
         }
     }
 
-    private static void checkHasId(SuspendedTicket ticket) {
-        if (ticket == null || ticket.getId() == null) {
-            throw new IllegalArgumentException("SuspendedTicket requires id");
-        }
-    }
+    private abstract class PagedAsyncCompletionHandler<T> extends ZendeskAsyncCompletionHandler<T> {
+        private String nextPage;
 
-    private static void checkHasToken(Attachment.Upload upload) {
-        if (upload.getToken() == null) {
-            throw new IllegalArgumentException("Upload requires token");
+        public void setPagedProperties(JsonNode responseNode, Class<?> clazz) {
+            JsonNode node = responseNode.get(NEXT_PAGE);
+            if (node == null) {
+                this.nextPage = null;
+                if (logger.isDebugEnabled()) {
+                    logger.debug(NEXT_PAGE + " property not found, pagination not supported" +
+                            (clazz != null ? " for " + clazz.getName() : ""));
+                }
+            } else {
+                this.nextPage = node.asText();
+            }
         }
-    }
 
-    private static List<Long> idArray(long id, long... ids) {
-        List<Long> result = new ArrayList<Long>(ids.length + 1);
-        result.add(id);
-        for (long i : ids) {
-            result.add(i);
+        public String getNextPage() {
+            return nextPage;
         }
-        return result;
-    }
 
-    private static List<String> statusArray(Status... statuses) {
-        List<String> result = new ArrayList<String>(statuses.length);
-        for (Status s : statuses) {
-            result.add(s.toString());
+        public void setNextPage(String nextPage) {
+            this.nextPage = nextPage;
         }
-        return result;
-    }
-
-    public static ObjectMapper createMapper() {
-        ObjectMapper mapper = new ObjectMapper();
-        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);
-        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);
-        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
-        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);        
-        return mapper;
     }
 
     //////////////////////////////////////////////////////////////////////
     // Helper classes
     //////////////////////////////////////////////////////////////////////
 
+    private class PagedAsyncListCompletionHandler<T> extends PagedAsyncCompletionHandler<List<T>> {
+        private final Class<T> clazz;
+        private final String name;
+
+        public PagedAsyncListCompletionHandler(Class<T> clazz, String name) {
+            this.clazz = clazz;
+            this.name = name;
+        }
+
+        @Override
+        public List<T> onCompleted(Response response) throws Exception {
+            logResponse(response);
+            if (isStatus2xx(response)) {
+                JsonNode responseNode = mapper.readTree(response.getResponseBodyAsBytes());
+                setPagedProperties(responseNode, clazz);
+                List<T> values = new ArrayList<T>();
+                for (JsonNode node : responseNode.get(name)) {
+                    values.add(mapper.convertValue(node, clazz));
+                }
+                return values;
+            }
+            throw new ZendeskResponseException(response);
+        }
+    }
+
     private class PagedIterable<T> implements Iterable<T> {
 
         private final Uri url;
@@ -2046,69 +2128,4 @@ public class Zendesk implements Closeable {
         }
 
     }
-
-    public static class Builder {
-        private AsyncHttpClient client = null;
-        private final String url;
-        private String username = null;
-        private String password = null;
-        private String token = null;
-        private String oauthToken = null;
-
-        public Builder(String url) {
-            this.url = url;
-        }
-
-        public Builder setClient(AsyncHttpClient client) {
-            this.client = client;
-            return this;
-        }
-
-        public Builder setUsername(String username) {
-            this.username = username;
-            return this;
-        }
-
-        public Builder setPassword(String password) {
-            this.password = password;
-            if (password != null) {
-                this.token = null;
-                this.oauthToken = null;
-            }
-            return this;
-        }
-
-        public Builder setToken(String token) {
-            this.token = token;
-            if (token != null) {
-                this.password = null;
-                this.oauthToken = null;
-            }
-            return this;
-        }
-
-
-        public Builder setOauthToken(String oauthToken) {
-            this.oauthToken = oauthToken;
-            if (oauthToken != null) {
-                this.password = null;
-                this.token = null;
-            }
-            return this;
-        }
-
-
-        public Builder setRetry(boolean retry) {
-            return this;
-        }
-
-        public Zendesk build() {
-            if (token != null) {
-                return new Zendesk(client, url, username + "/token", token);
-            } else if (oauthToken != null) {
-                return new Zendesk(client, url, oauthToken);
-            }
-            return new Zendesk(client, url, username, password);
-        }
-    }
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/Automation.java b/src/main/java/org/zendesk/client/v2/model/Automation.java
index be4fe26..0e681ec 100644
--- a/src/main/java/org/zendesk/client/v2/model/Automation.java
+++ b/src/main/java/org/zendesk/client/v2/model/Automation.java
@@ -1,5 +1,5 @@
 /**
- * 
+ *
  */
 package org.zendesk.client.v2.model;
 
@@ -9,76 +9,90 @@ import java.util.List;
 
 /**
  * https://developer.zendesk.com/rest_api/docs/core/automations
- * 
- * @author Sandeep Kaul (sandeep.kaul@olacabs.com)
  *
+ * @author Sandeep Kaul (sandeep.kaul@olacabs.com)
  */
 public class Automation {
 
-  private Long id;
-  private String title;
-  private Boolean active;
-  private List<Action> actions;
-  private Conditions conditions;
-  private int position;
-  private Date createdAt;
-  private Date updatedAt;
-  
-  public Long getId() {
-    return id;
-  }
-  public void setId(Long id) {
-    this.id = id;
-  }
-  public String getTitle() {
-    return title;
-  }
-  public void setTitle(String title) {
-    this.title = title;
-  }
-  public Boolean getActive() {
-    return active;
-  }
-  public void setActive(Boolean active) {
-    this.active = active;
-  }
-  public List<Action> getActions() {
-    return actions;
-  }
-  public void setActions(List<Action> actions) {
-    this.actions = actions;
-  }
-  public Conditions getConditions() {
-    return conditions;
-  }
-  public void setConditions(Conditions conditions) {
-    this.conditions = conditions;
-  }
-  public Date getCreatedAt() {
-    return createdAt;
-  }
-  public void setCreatedAt(Date createdAt) {
-    this.createdAt = createdAt;
-  }
-  public Date getUpdatedAt() {
-    return updatedAt;
-  }
-  public void setUpdatedAt(Date updatedAt) {
-    this.updatedAt = updatedAt;
-  }
-  public int getPosition() {
-    return position;
-  }
-  public void setPosition(int position) {
-    this.position = position;
-  }
-  @Override
-  public String toString() {
-    return "Automation [id=" + id + ", title=" + title + ", active=" + active + ", actions="
-        + actions + ", conditions=" + conditions + ", position=" + position + ", createdAt="
-        + createdAt + ", updatedAt=" + updatedAt + "]";
-  }
-  
-  
-  
+    private Long id;
+    private String title;
+    private Boolean active;
+    private List<Action> actions;
+    private Conditions conditions;
+    private int position;
+    private Date createdAt;
+    private Date updatedAt;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public Boolean getActive() {
+        return active;
+    }
+
+    public void setActive(Boolean active) {
+        this.active = active;
+    }
+
+    public List<Action> getActions() {
+        return actions;
+    }
+
+    public void setActions(List<Action> actions) {
+        this.actions = actions;
+    }
+
+    public Conditions getConditions() {
+        return conditions;
+    }
+
+    public void setConditions(Conditions conditions) {
+        this.conditions = conditions;
+    }
+
+    public Date getCreatedAt() {
+        return createdAt;
+    }
+
+    public void setCreatedAt(Date createdAt) {
+        this.createdAt = createdAt;
+    }
+
+    public Date getUpdatedAt() {
+        return updatedAt;
+    }
+
+    public void setUpdatedAt(Date updatedAt) {
+        this.updatedAt = updatedAt;
+    }
+
+    public int getPosition() {
+        return position;
+    }
+
+    public void setPosition(int position) {
+        this.position = position;
+    }
+
+    @Override
+    public String toString() {
+        return "Automation [id=" + id + ", title=" + title + ", active=" + active + ", actions="
+                + actions + ", conditions=" + conditions + ", position=" + position + ", createdAt="
+                + createdAt + ", updatedAt=" + updatedAt + "]";
+    }
+
+
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/Condition.java b/src/main/java/org/zendesk/client/v2/model/Condition.java
index 504535b..8d26696 100644
--- a/src/main/java/org/zendesk/client/v2/model/Condition.java
+++ b/src/main/java/org/zendesk/client/v2/model/Condition.java
@@ -1,58 +1,58 @@
 /**
- * 
+ *
  */
 package org.zendesk.client.v2.model;
 
 /**
  * @author Sandeep Kaul (sandeep.kaul@olacabs.com)
- *
  */
 public class Condition {
-  private String field;
-  private String operator;
-  private String value;
-
-  public Condition() {}
-
-  public Condition(String field, String operator, String value) {
-    this.field = field;
-    this.operator = operator;
-    this.value = value;
-  }
-
-  public String getField() {
-    return field;
-  }
-
-  public void setField(String field) {
-    this.field = field;
-  }
-
-  public String getOperator() {
-    return operator;
-  }
-
-  public void setOperator(String operator) {
-    this.operator = operator;
-  }
-
-  public String getValue() {
-    return value;
-  }
-
-  public void setValue(String value) {
-    this.value = value;
-  }
-
-  @Override
-  public String toString() {
-    final StringBuilder sb = new StringBuilder();
-    sb.append("Condition");
-    sb.append("{field=").append(field);
-    sb.append(", operator=").append(operator);
-    sb.append(", value=").append(value);
-    sb.append('}');
-    return sb.toString();
-  }
+    private String field;
+    private String operator;
+    private String value;
+
+    public Condition() {
+    }
+
+    public Condition(String field, String operator, String value) {
+        this.field = field;
+        this.operator = operator;
+        this.value = value;
+    }
+
+    public String getField() {
+        return field;
+    }
+
+    public void setField(String field) {
+        this.field = field;
+    }
+
+    public String getOperator() {
+        return operator;
+    }
+
+    public void setOperator(String operator) {
+        this.operator = operator;
+    }
+
+    public String getValue() {
+        return value;
+    }
+
+    public void setValue(String value) {
+        this.value = value;
+    }
+
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("Condition");
+        sb.append("{field=").append(field);
+        sb.append(", operator=").append(operator);
+        sb.append(", value=").append(value);
+        sb.append('}');
+        return sb.toString();
+    }
 
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/Conditions.java b/src/main/java/org/zendesk/client/v2/model/Conditions.java
index 16fcbed..05875f2 100644
--- a/src/main/java/org/zendesk/client/v2/model/Conditions.java
+++ b/src/main/java/org/zendesk/client/v2/model/Conditions.java
@@ -1,5 +1,5 @@
 /**
- * 
+ *
  */
 package org.zendesk.client.v2.model;
 
@@ -9,36 +9,35 @@ import java.util.List;
 
 /**
  * @author Sandeep Kaul(sandeep.kaul@olacabs.com)
- *
  */
 public class Conditions {
-  private List<Condition> all = new ArrayList<Condition>();
-  private List<Condition> any = new ArrayList<Condition>();
-
-  public List<Condition> getAll() {
-    return all;
-  }
-
-  public void setAll(List<Condition> all) {
-    this.all = all;
-  }
-
-  public List<Condition> getAny() {
-    return any;
-  }
-
-  public void setAny(List<Condition> any) {
-    this.any = any;
-  }
-
-  @Override
-  public String toString() {
-    final StringBuilder sb = new StringBuilder();
-    sb.append("Conditions");
-    sb.append("{all=").append(all);
-    sb.append(", any=").append(any);
-    sb.append('}');
-    return sb.toString();
-  }
+    private List<Condition> all = new ArrayList<Condition>();
+    private List<Condition> any = new ArrayList<Condition>();
+
+    public List<Condition> getAll() {
+        return all;
+    }
+
+    public void setAll(List<Condition> all) {
+        this.all = all;
+    }
+
+    public List<Condition> getAny() {
+        return any;
+    }
+
+    public void setAny(List<Condition> any) {
+        this.any = any;
+    }
+
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("Conditions");
+        sb.append("{all=").append(all);
+        sb.append(", any=").append(any);
+        sb.append('}');
+        return sb.toString();
+    }
 
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/Macro.java b/src/main/java/org/zendesk/client/v2/model/Macro.java
index 3653d4d..1d8bc9a 100644
--- a/src/main/java/org/zendesk/client/v2/model/Macro.java
+++ b/src/main/java/org/zendesk/client/v2/model/Macro.java
@@ -21,7 +21,8 @@ public class Macro {
     private Date createdAt;
     private Date updatedAt;
 
-    public Macro() {}
+    public Macro() {
+    }
 
     public int getId() {
         return id;
diff --git a/src/main/java/org/zendesk/client/v2/model/Metric.java b/src/main/java/org/zendesk/client/v2/model/Metric.java
index 6707d4d..ea69374 100644
--- a/src/main/java/org/zendesk/client/v2/model/Metric.java
+++ b/src/main/java/org/zendesk/client/v2/model/Metric.java
@@ -220,7 +220,10 @@ public class Metric {
         @JsonProperty("business")
         protected Long businessMinutes;
 
-        public ZendeskComboMinutes() {};
+        public ZendeskComboMinutes() {
+        }
+
+        ;
 
         public Long getCalendarMinutes() {
             return calendarMinutes;
diff --git a/src/main/java/org/zendesk/client/v2/model/SuspendedTicket.java b/src/main/java/org/zendesk/client/v2/model/SuspendedTicket.java
index e84ce5d..845399f 100644
--- a/src/main/java/org/zendesk/client/v2/model/SuspendedTicket.java
+++ b/src/main/java/org/zendesk/client/v2/model/SuspendedTicket.java
@@ -1,9 +1,9 @@
 package org.zendesk.client.v2.model;
 
-import java.util.Date;
-
 import com.fasterxml.jackson.annotation.JsonProperty;
 
+import java.util.Date;
+
 public class SuspendedTicket {
     /* Automatically assigned */
     private Long id;
diff --git a/src/main/java/org/zendesk/client/v2/model/TicketForm.java b/src/main/java/org/zendesk/client/v2/model/TicketForm.java
index 1d124e9..9b941c6 100644
--- a/src/main/java/org/zendesk/client/v2/model/TicketForm.java
+++ b/src/main/java/org/zendesk/client/v2/model/TicketForm.java
@@ -1,105 +1,128 @@
 package org.zendesk.client.v2.model;
 
-import java.util.Date;
-import java.util.List;
-
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonProperty;
 
+import java.util.Date;
+import java.util.List;
+
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class TicketForm implements SearchResultEntity {
 
-	private Long id;
-	private String name;
-	@JsonProperty("raw_name")
-	private String rawName;
-	@JsonProperty("display_name")
-	private String displayName;
-	@JsonProperty("raw_display_name")
-	private String rawDisplayName;
-	private int position;
-	private boolean active;
-	@JsonProperty("end_user_visible")
-	private boolean endUserVisible;
-	@JsonProperty("default")
-	private boolean defaultForm;
-	@JsonProperty("ticket_field_ids")
-	private List<Integer> ticketFieldIds;
-	@JsonProperty("created_at")
+    private Long id;
+    private String name;
+    @JsonProperty("raw_name")
+    private String rawName;
+    @JsonProperty("display_name")
+    private String displayName;
+    @JsonProperty("raw_display_name")
+    private String rawDisplayName;
+    private int position;
+    private boolean active;
+    @JsonProperty("end_user_visible")
+    private boolean endUserVisible;
+    @JsonProperty("default")
+    private boolean defaultForm;
+    @JsonProperty("ticket_field_ids")
+    private List<Integer> ticketFieldIds;
+    @JsonProperty("created_at")
     private Date createdAt;
-	@JsonProperty("updated_at")
+    @JsonProperty("updated_at")
     private Date updatedAt;
 
-	public String getName() {
-		return name;
-	}
-	public void setName(String name) {
-		this.name = name;
-	}
-	public String getRawName() {
-		return rawName;
-	}
-	public void setRawName(String rawName) {
-		this.rawName = rawName;
-	}
-	public String getDisplayName() {
-		return displayName;
-	}
-	public void setDisplayName(String displayName) {
-		this.displayName = displayName;
-	}
-	public String getRawDisplayName() {
-		return rawDisplayName;
-	}
-	public void setRawDisplayName(String rawDisplayName) {
-		this.rawDisplayName = rawDisplayName;
-	}
-	public int getPosition() {
-		return position;
-	}
-	public void setPosition(int position) {
-		this.position = position;
-	}
-	public boolean isActive() {
-		return active;
-	}
-	public void setActive(boolean active) {
-		this.active = active;
-	}
-	public boolean isEndUserVisible() {
-		return endUserVisible;
-	}
-	public void setEndUserVisible(boolean endUserVisible) {
-		this.endUserVisible = endUserVisible;
-	}
-	public boolean isDefaultForm() {
-		return defaultForm;
-	}
-	public void setDefaultForm(boolean defaultForm) {
-		this.defaultForm = defaultForm;
-	}
-	public List<Integer> getTicketFieldIds() {
-		return ticketFieldIds;
-	}
-	public void setTicketFieldIds(List<Integer> ticketFieldIds) {
-		this.ticketFieldIds = ticketFieldIds;
-	}
-	public Date getCreatedAt() {
-		return createdAt;
-	}
-	public void setCreatedAt(Date createdAt) {
-		this.createdAt = createdAt;
-	}
-	public Date getUpdatedAt() {
-		return updatedAt;
-	}
-	public void setUpdatedAt(Date updatedAt) {
-		this.updatedAt = updatedAt;
-	}
-	public Long getId() {
-		return id;
-	}
-	public void setId(Long id) {
-		this.id = id;
-	}
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getRawName() {
+        return rawName;
+    }
+
+    public void setRawName(String rawName) {
+        this.rawName = rawName;
+    }
+
+    public String getDisplayName() {
+        return displayName;
+    }
+
+    public void setDisplayName(String displayName) {
+        this.displayName = displayName;
+    }
+
+    public String getRawDisplayName() {
+        return rawDisplayName;
+    }
+
+    public void setRawDisplayName(String rawDisplayName) {
+        this.rawDisplayName = rawDisplayName;
+    }
+
+    public int getPosition() {
+        return position;
+    }
+
+    public void setPosition(int position) {
+        this.position = position;
+    }
+
+    public boolean isActive() {
+        return active;
+    }
+
+    public void setActive(boolean active) {
+        this.active = active;
+    }
+
+    public boolean isEndUserVisible() {
+        return endUserVisible;
+    }
+
+    public void setEndUserVisible(boolean endUserVisible) {
+        this.endUserVisible = endUserVisible;
+    }
+
+    public boolean isDefaultForm() {
+        return defaultForm;
+    }
+
+    public void setDefaultForm(boolean defaultForm) {
+        this.defaultForm = defaultForm;
+    }
+
+    public List<Integer> getTicketFieldIds() {
+        return ticketFieldIds;
+    }
+
+    public void setTicketFieldIds(List<Integer> ticketFieldIds) {
+        this.ticketFieldIds = ticketFieldIds;
+    }
+
+    public Date getCreatedAt() {
+        return createdAt;
+    }
+
+    public void setCreatedAt(Date createdAt) {
+        this.createdAt = createdAt;
+    }
+
+    public Date getUpdatedAt() {
+        return updatedAt;
+    }
+
+    public void setUpdatedAt(Date updatedAt) {
+        this.updatedAt = updatedAt;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/Trigger.java b/src/main/java/org/zendesk/client/v2/model/Trigger.java
index f508ce2..cc79392 100644
--- a/src/main/java/org/zendesk/client/v2/model/Trigger.java
+++ b/src/main/java/org/zendesk/client/v2/model/Trigger.java
@@ -6,178 +6,179 @@ import java.util.List;
 
 /**
  * https://developer.zendesk.com/rest_api/docs/core/triggers
- * 
+ *
  * @author adavidson
  */
 public class Trigger {
-   private Long         id;
-   private String       title;
-   private boolean      active;
-   private int          position;
-   private Conditions   conditions;
-   private List<Action> actions;
-   private Date         createdAt;
-   private Date         updatedAt;
-
-   public Long getId() {
-      return id;
-   }
-
-   public void setId(Long id) {
-      this.id = id;
-   }
-
-   public String getTitle() {
-      return title;
-   }
-
-   public void setTitle(String title) {
-      this.title = title;
-   }
-
-   public boolean isActive() {
-      return active;
-   }
-
-   public void setActive(boolean active) {
-      this.active = active;
-   }
-
-   public Date getCreatedAt() {
-      return createdAt;
-   }
-
-   public void setCreatedAt(Date createdAt) {
-      this.createdAt = createdAt;
-   }
-
-   public int getPosition() {
-      return position;
-   }
-
-   public void setPosition(int position) {
-      this.position = position;
-   }
-
-   public Conditions getConditions() {
-      return conditions;
-   }
-
-   public void setConditions(Conditions conditions) {
-      this.conditions = conditions;
-   }
-
-   public List<Action> getActions() {
-      return actions;
-   }
-
-   public void setActions(List<Action> actions) {
-      this.actions = actions;
-   }
-
-   public Date getUpdatedAt() {
-      return updatedAt;
-   }
-
-   public void setUpdatedAt(Date updatedAt) {
-      this.updatedAt = updatedAt;
-   }
-
-   @Override
-   public String toString() {
-      final StringBuilder sb = new StringBuilder();
-      sb.append("Trigger");
-      sb.append("{id=").append(id);
-      sb.append(", title=").append(title);
-      sb.append(", active=").append(active);
-      sb.append(", position=").append(position);
-      sb.append(", active=").append(active);
-      sb.append(", conditions=").append(conditions);
-      sb.append(", actions=").append(actions);
-      sb.append(", updatedAt=").append(updatedAt);
-      sb.append('}');
-      return sb.toString();
-   }
-
-   public static class Conditions {
-      private List<Condition> all = new ArrayList<Condition>();
-      private List<Condition> any = new ArrayList<Condition>();
-
-      public List<Condition> getAll() {
-         return all;
-      }
-
-      public void setAll(List<Condition> all) {
-         this.all = all;
-      }
-
-      public List<Condition> getAny() {
-         return any;
-      }
-
-      public void setAny(List<Condition> any) {
-         this.any = any;
-      }
-
-      @Override
-      public String toString() {
-         final StringBuilder sb = new StringBuilder();
-         sb.append("Conditions");
-         sb.append("{all=").append(all);
-         sb.append(", any=").append(any);
-         sb.append('}');
-         return sb.toString();
-      }
-   }
-
-   public static class Condition {
-      private String field;
-      private String operator;
-      private String value;
-
-      public Condition() {}
-
-      public Condition(String field, String operator, String value) {
-         this.field = field;
-         this.operator = operator;
-         this.value = value;
-      }
-
-      public String getField() {
-         return field;
-      }
-
-      public void setField(String field) {
-         this.field = field;
-      }
-
-      public String getOperator() {
-         return operator;
-      }
-
-      public void setOperator(String operator) {
-         this.operator = operator;
-      }
-
-      public String getValue() {
-         return value;
-      }
-
-      public void setValue(String value) {
-         this.value = value;
-      }
-
-      @Override
-      public String toString() {
-         final StringBuilder sb = new StringBuilder();
-         sb.append("Condition");
-         sb.append("{field=").append(field);
-         sb.append(", operator=").append(operator);
-         sb.append(", value=").append(value);
-         sb.append('}');
-         return sb.toString();
-      }
-
-   }
+    private Long id;
+    private String title;
+    private boolean active;
+    private int position;
+    private Conditions conditions;
+    private List<Action> actions;
+    private Date createdAt;
+    private Date updatedAt;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public boolean isActive() {
+        return active;
+    }
+
+    public void setActive(boolean active) {
+        this.active = active;
+    }
+
+    public Date getCreatedAt() {
+        return createdAt;
+    }
+
+    public void setCreatedAt(Date createdAt) {
+        this.createdAt = createdAt;
+    }
+
+    public int getPosition() {
+        return position;
+    }
+
+    public void setPosition(int position) {
+        this.position = position;
+    }
+
+    public Conditions getConditions() {
+        return conditions;
+    }
+
+    public void setConditions(Conditions conditions) {
+        this.conditions = conditions;
+    }
+
+    public List<Action> getActions() {
+        return actions;
+    }
+
+    public void setActions(List<Action> actions) {
+        this.actions = actions;
+    }
+
+    public Date getUpdatedAt() {
+        return updatedAt;
+    }
+
+    public void setUpdatedAt(Date updatedAt) {
+        this.updatedAt = updatedAt;
+    }
+
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("Trigger");
+        sb.append("{id=").append(id);
+        sb.append(", title=").append(title);
+        sb.append(", active=").append(active);
+        sb.append(", position=").append(position);
+        sb.append(", active=").append(active);
+        sb.append(", conditions=").append(conditions);
+        sb.append(", actions=").append(actions);
+        sb.append(", updatedAt=").append(updatedAt);
+        sb.append('}');
+        return sb.toString();
+    }
+
+    public static class Conditions {
+        private List<Condition> all = new ArrayList<Condition>();
+        private List<Condition> any = new ArrayList<Condition>();
+
+        public List<Condition> getAll() {
+            return all;
+        }
+
+        public void setAll(List<Condition> all) {
+            this.all = all;
+        }
+
+        public List<Condition> getAny() {
+            return any;
+        }
+
+        public void setAny(List<Condition> any) {
+            this.any = any;
+        }
+
+        @Override
+        public String toString() {
+            final StringBuilder sb = new StringBuilder();
+            sb.append("Conditions");
+            sb.append("{all=").append(all);
+            sb.append(", any=").append(any);
+            sb.append('}');
+            return sb.toString();
+        }
+    }
+
+    public static class Condition {
+        private String field;
+        private String operator;
+        private String value;
+
+        public Condition() {
+        }
+
+        public Condition(String field, String operator, String value) {
+            this.field = field;
+            this.operator = operator;
+            this.value = value;
+        }
+
+        public String getField() {
+            return field;
+        }
+
+        public void setField(String field) {
+            this.field = field;
+        }
+
+        public String getOperator() {
+            return operator;
+        }
+
+        public void setOperator(String operator) {
+            this.operator = operator;
+        }
+
+        public String getValue() {
+            return value;
+        }
+
+        public void setValue(String value) {
+            this.value = value;
+        }
+
+        @Override
+        public String toString() {
+            final StringBuilder sb = new StringBuilder();
+            sb.append("Condition");
+            sb.append("{field=").append(field);
+            sb.append(", operator=").append(operator);
+            sb.append(", value=").append(value);
+            sb.append('}');
+            return sb.toString();
+        }
+
+    }
 
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/TwitterMonitor.java b/src/main/java/org/zendesk/client/v2/model/TwitterMonitor.java
index 45a757b..31047ad 100644
--- a/src/main/java/org/zendesk/client/v2/model/TwitterMonitor.java
+++ b/src/main/java/org/zendesk/client/v2/model/TwitterMonitor.java
@@ -1,103 +1,103 @@
 package org.zendesk.client.v2.model;
 
-import java.util.Date;
-
 import com.fasterxml.jackson.annotation.JsonProperty;
 
+import java.util.Date;
+
 public class TwitterMonitor implements SearchResultEntity {
-   private Long    id;
-   private String  screenName;
-   private Long    twitterUserId;
-   private Date    createdAt;
-   private Date    updatedAt;
-   private String  avatarUrl;
-   private String  name;
-   private boolean allowReply;
-
-   @JsonProperty("avatar_url")
-   public String getAvatarUrl() {
-      return avatarUrl;
-   }
-
-   public void setAvatarUrl(String avatarUrl) {
-      this.avatarUrl = avatarUrl;
-   }
-
-   public String getName() {
-      return name;
-   }
-
-   public void setName(String name) {
-      this.name = name;
-   }
-
-   @JsonProperty("allow_reply")
-   public boolean isAllowReply() {
-      return allowReply;
-   }
-
-   public void setAllowReplay(boolean allowReplay) {
-      this.allowReply = allowReplay;
-   }
-
-   public Long getId() {
-      return id;
-   }
-
-   public void setId(Long id) {
-      this.id = id;
-   }
-
-   @JsonProperty("twitter_user_id")
-   public Long getTwitterUserId() {
-      return twitterUserId;
-   }
-
-   public void setTwitterUserId(Long twitterUserId) {
-      this.twitterUserId = twitterUserId;
-   }
-
-   @JsonProperty("created_at")
-   public Date getCreatedAt() {
-      return createdAt;
-   }
-
-   public void setCreatedAt(Date createdAt) {
-      this.createdAt = createdAt;
-   }
-
-   @JsonProperty("updated_at")
-   public Date getUpdatedAt() {
-      return updatedAt;
-   }
-
-   public void setUpdatedAt(Date updatedAt) {
-      this.updatedAt = updatedAt;
-   }
-
-   @JsonProperty("screen_name")
-   public String getScreenName() {
-      return screenName;
-   }
-
-   public void setScreenName(String screenName) {
-      this.screenName = screenName;
-   }
-
-   @Override
-   public String toString() {
-      final StringBuilder sb = new StringBuilder();
-      sb.append("TwitterMonitor");
-      sb.append("{screenName='").append(screenName).append('\'');
-      sb.append(", id=").append(id);
-      sb.append(", twitterUserId='").append(twitterUserId).append('\'');
-      sb.append(", createdAt='").append(createdAt).append('\'');
-      sb.append(", updatedAt='").append(updatedAt).append('\'');
-      sb.append(", avatarUrl='").append(avatarUrl).append('\'');
-      sb.append(", name='").append(name).append('\'');
-      sb.append(", allowReply=").append(allowReply);
-      sb.append('}');
-      return sb.toString();
-   }
+    private Long id;
+    private String screenName;
+    private Long twitterUserId;
+    private Date createdAt;
+    private Date updatedAt;
+    private String avatarUrl;
+    private String name;
+    private boolean allowReply;
+
+    @JsonProperty("avatar_url")
+    public String getAvatarUrl() {
+        return avatarUrl;
+    }
+
+    public void setAvatarUrl(String avatarUrl) {
+        this.avatarUrl = avatarUrl;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @JsonProperty("allow_reply")
+    public boolean isAllowReply() {
+        return allowReply;
+    }
+
+    public void setAllowReplay(boolean allowReplay) {
+        this.allowReply = allowReplay;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    @JsonProperty("twitter_user_id")
+    public Long getTwitterUserId() {
+        return twitterUserId;
+    }
+
+    public void setTwitterUserId(Long twitterUserId) {
+        this.twitterUserId = twitterUserId;
+    }
+
+    @JsonProperty("created_at")
+    public Date getCreatedAt() {
+        return createdAt;
+    }
+
+    public void setCreatedAt(Date createdAt) {
+        this.createdAt = createdAt;
+    }
+
+    @JsonProperty("updated_at")
+    public Date getUpdatedAt() {
+        return updatedAt;
+    }
+
+    public void setUpdatedAt(Date updatedAt) {
+        this.updatedAt = updatedAt;
+    }
+
+    @JsonProperty("screen_name")
+    public String getScreenName() {
+        return screenName;
+    }
+
+    public void setScreenName(String screenName) {
+        this.screenName = screenName;
+    }
+
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("TwitterMonitor");
+        sb.append("{screenName='").append(screenName).append('\'');
+        sb.append(", id=").append(id);
+        sb.append(", twitterUserId='").append(twitterUserId).append('\'');
+        sb.append(", createdAt='").append(createdAt).append('\'');
+        sb.append(", updatedAt='").append(updatedAt).append('\'');
+        sb.append(", avatarUrl='").append(avatarUrl).append('\'');
+        sb.append(", name='").append(name).append('\'');
+        sb.append(", allowReply=").append(allowReply);
+        sb.append('}');
+        return sb.toString();
+    }
 
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/events/AttachmentRedactionEvent.java b/src/main/java/org/zendesk/client/v2/model/events/AttachmentRedactionEvent.java
index 5243e30..40b5160 100644
--- a/src/main/java/org/zendesk/client/v2/model/events/AttachmentRedactionEvent.java
+++ b/src/main/java/org/zendesk/client/v2/model/events/AttachmentRedactionEvent.java
@@ -4,41 +4,41 @@ import com.fasterxml.jackson.annotation.JsonProperty;
 
 /**
  * An attachment was redacted, or permanently deleted, from a ticket comment
- * 
- * @author matthewtckr
- * @see <a href="https://developer.zendesk.com/rest_api/docs/core/ticket_audits#attachment-redaction-event">Zendesk API Documentation</a>
  *
+ * @author matthewtckr
+ * @see
+ * <a href="https://developer.zendesk.com/rest_api/docs/core/ticket_audits#attachment-redaction-event">Zendesk API Documentation</a>
  */
 public class AttachmentRedactionEvent extends Event {
 
-  private Long attachmentId;
-  private Long commentId;
-
-  @JsonProperty("attachment_id")
-  public Long getAttachmentId() {
-    return attachmentId;
-  }
-
-  public void setAttachmentId( Long attachmentId ) {
-    this.attachmentId = attachmentId;
-  }
-
-  @JsonProperty("comment_id")
-  public Long getCommentId() {
-    return commentId;
-  }
-
-  public void setCommentId( Long commentId ) {
-    this.commentId = commentId;
-  }
-
-  @Override
-  public String toString() {
-      final StringBuilder sb = new StringBuilder();
-      sb.append("AttachmentRedactionEvent");
-      sb.append("{attachmentId=").append(attachmentId);
-      sb.append(", commentId=").append(commentId);
-      sb.append('}');
-      return sb.toString();
-  }
+    private Long attachmentId;
+    private Long commentId;
+
+    @JsonProperty("attachment_id")
+    public Long getAttachmentId() {
+        return attachmentId;
+    }
+
+    public void setAttachmentId(Long attachmentId) {
+        this.attachmentId = attachmentId;
+    }
+
+    @JsonProperty("comment_id")
+    public Long getCommentId() {
+        return commentId;
+    }
+
+    public void setCommentId(Long commentId) {
+        this.commentId = commentId;
+    }
+
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("AttachmentRedactionEvent");
+        sb.append("{attachmentId=").append(attachmentId);
+        sb.append(", commentId=").append(commentId);
+        sb.append('}');
+        return sb.toString();
+    }
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/events/CommentRedactionEvent.java b/src/main/java/org/zendesk/client/v2/model/events/CommentRedactionEvent.java
index b18ae16..4490b05 100644
--- a/src/main/java/org/zendesk/client/v2/model/events/CommentRedactionEvent.java
+++ b/src/main/java/org/zendesk/client/v2/model/events/CommentRedactionEvent.java
@@ -4,30 +4,30 @@ import com.fasterxml.jackson.annotation.JsonProperty;
 
 /**
  * A word or string was redacted from a ticket comment
- * 
- * @author matthewtckr
- * @see <a href="https://developer.zendesk.com/rest_api/docs/core/ticket_audits#comment-redaction-event">Zendesk API Documentation</a>
  *
+ * @author matthewtckr
+ * @see
+ * <a href="https://developer.zendesk.com/rest_api/docs/core/ticket_audits#comment-redaction-event">Zendesk API Documentation</a>
  */
 public class CommentRedactionEvent extends Event {
 
-  private Long commentId;
+    private Long commentId;
 
-  @JsonProperty("comment_id")
-  public Long getCommentId() {
-    return commentId;
-  }
+    @JsonProperty("comment_id")
+    public Long getCommentId() {
+        return commentId;
+    }
 
-  public void setCommentId( Long commentId ) {
-    this.commentId = commentId;
-  }
+    public void setCommentId(Long commentId) {
+        this.commentId = commentId;
+    }
 
-  @Override
-  public String toString() {
-      final StringBuilder sb = new StringBuilder();
-      sb.append("CommentRedactionEvent");
-      sb.append("{commentId=").append(commentId);
-      sb.append('}');
-      return sb.toString();
-  }
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("CommentRedactionEvent");
+        sb.append("{commentId=").append(commentId);
+        sb.append('}');
+        return sb.toString();
+    }
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/events/Event.java b/src/main/java/org/zendesk/client/v2/model/events/Event.java
index c7ab440..2bced90 100644
--- a/src/main/java/org/zendesk/client/v2/model/events/Event.java
+++ b/src/main/java/org/zendesk/client/v2/model/events/Event.java
@@ -24,9 +24,9 @@ import com.fasterxml.jackson.annotation.JsonTypeInfo;
         @JsonSubTypes.Type(value = TweetEvent.class, name = "Tweet"),
         @JsonSubTypes.Type(value = SMSEvent.class, name = "SMS"),
         @JsonSubTypes.Type(value = TicketSharingEvent.class, name = "TicketSharingEvent"),
-        @JsonSubTypes.Type(value = AttachmentRedactionEvent.class, name = "AttachmentRedactionEvent" ),
-        @JsonSubTypes.Type(value = CommentRedactionEvent.class, name = "CommentRedactionEvent" ),
-        @JsonSubTypes.Type(value = OrganizationActivityEvent.class, name = "OrganizationActivity" )
+        @JsonSubTypes.Type(value = AttachmentRedactionEvent.class, name = "AttachmentRedactionEvent"),
+        @JsonSubTypes.Type(value = CommentRedactionEvent.class, name = "CommentRedactionEvent"),
+        @JsonSubTypes.Type(value = OrganizationActivityEvent.class, name = "OrganizationActivity")
 })
 
 public abstract class Event {
diff --git a/src/main/java/org/zendesk/client/v2/model/events/OrganizationActivityEvent.java b/src/main/java/org/zendesk/client/v2/model/events/OrganizationActivityEvent.java
index 81b7e98..2afefaf 100644
--- a/src/main/java/org/zendesk/client/v2/model/events/OrganizationActivityEvent.java
+++ b/src/main/java/org/zendesk/client/v2/model/events/OrganizationActivityEvent.java
@@ -1,64 +1,64 @@
 package org.zendesk.client.v2.model.events;
 
-import java.util.List;
-
 import org.zendesk.client.v2.model.Via;
 
+import java.util.List;
+
 /**
  * A notification was sent to the organization subscribers
- * 
- * @author matthewtckr
- * @see <a href="https://developer.zendesk.com/rest_api/docs/core/ticket_audits#organization-subscription-notification-event">Zendesk API Documentation</a>
  *
+ * @author matthewtckr
+ * @see
+ * <a href="https://developer.zendesk.com/rest_api/docs/core/ticket_audits#organization-subscription-notification-event">Zendesk API Documentation</a>
  */
 public class OrganizationActivityEvent extends Event {
 
-  private String subject;
-  private String body;
-  private List<Long> recipients;
-  private Via via;
+    private String subject;
+    private String body;
+    private List<Long> recipients;
+    private Via via;
 
-  public String getSubject() {
-    return subject;
-  }
+    public String getSubject() {
+        return subject;
+    }
 
-  public void setSubject( String subject ) {
-    this.subject = subject;
-  }
+    public void setSubject(String subject) {
+        this.subject = subject;
+    }
 
-  public String getBody() {
-    return body;
-  }
+    public String getBody() {
+        return body;
+    }
 
-  public void setBody( String body ) {
-    this.body = body;
-  }
+    public void setBody(String body) {
+        this.body = body;
+    }
 
-  public List<Long> getRecipients() {
-    return recipients;
-  }
+    public List<Long> getRecipients() {
+        return recipients;
+    }
 
-  public void setRecipients( List<Long> recipients ) {
-    this.recipients = recipients;
-  }
+    public void setRecipients(List<Long> recipients) {
+        this.recipients = recipients;
+    }
 
-  public Via getVia() {
-    return via;
-  }
+    public Via getVia() {
+        return via;
+    }
 
-  public void setVia( Via via ) {
-    this.via = via;
-  }
+    public void setVia(Via via) {
+        this.via = via;
+    }
 
-  @Override
-  public String toString() {
-      final StringBuilder sb = new StringBuilder();
-      sb.append("OrganizationActivityEvent");
-      sb.append("{subject=").append(subject);
-      sb.append(", body=").append(body);
-      sb.append(", recipients=").append(recipients);
-      sb.append(", via=").append(via);
-      sb.append('}');
-      return sb.toString();
-  }
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("OrganizationActivityEvent");
+        sb.append("{subject=").append(subject);
+        sb.append(", body=").append(body);
+        sb.append(", recipients=").append(recipients);
+        sb.append(", via=").append(via);
+        sb.append('}');
+        return sb.toString();
+    }
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/events/SatisfactionRatingEvent.java b/src/main/java/org/zendesk/client/v2/model/events/SatisfactionRatingEvent.java
index 1907609..6660f0a 100644
--- a/src/main/java/org/zendesk/client/v2/model/events/SatisfactionRatingEvent.java
+++ b/src/main/java/org/zendesk/client/v2/model/events/SatisfactionRatingEvent.java
@@ -7,7 +7,7 @@ import com.fasterxml.jackson.annotation.JsonProperty;
  * @since 05/04/2013 11:57
  */
 public class
-        SatisfactionRatingEvent extends Event {
+SatisfactionRatingEvent extends Event {
     private String score;
     private Long assigneeId;
     private String body;
diff --git a/src/main/java/org/zendesk/client/v2/model/hc/Article.java b/src/main/java/org/zendesk/client/v2/model/hc/Article.java
index 42cf56e..0f022e2 100644
--- a/src/main/java/org/zendesk/client/v2/model/hc/Article.java
+++ b/src/main/java/org/zendesk/client/v2/model/hc/Article.java
@@ -7,70 +7,109 @@ import java.util.Date;
 import java.util.List;
 
 public class Article implements SearchResultEntity {
-    /** Automatically assigned when the article is created */
+    /**
+     * Automatically assigned when the article is created
+     */
     private Long id;
 
-    /** The API url of the article */
+    /**
+     * The API url of the article
+     */
     private String url;
 
-    /** The url of the article in Help Center */
+    /**
+     * The url of the article in Help Center
+     */
     @JsonProperty("html_url")
     private String htmlUrl;
 
-    /** The title of the article */
+    /**
+     * The title of the article
+     */
     private String title;
 
-    /** The HTML body of the article */
+    /**
+     * The HTML body of the article
+     */
     private String body;
 
-    /** The locale that the article is being displayed in */
+    /**
+     * The locale that the article is being displayed in
+     */
     private String locale;
 
-    /** The source (default) locale of the article */
+    /**
+     * The source (default) locale of the article
+     */
     @JsonProperty("source_locale")
     private String sourceLocale;
 
-    /** The id of the user who wrote the article (set to the user who made the request on create by default) */
+    /**
+     * The id of the user who wrote the article (set to the user who made the request on create by default)
+     */
     @JsonProperty("author_id")
     private Long authorId;
 
-    /** True if comments are disabled; false otherwise */
+    /**
+     * True if comments are disabled; false otherwise
+     */
     @JsonProperty("comments_disabled")
     private Boolean commentsDisabled;
 
-    /** Whether the source (default) translation of the article is out of date */
+    /**
+     * Whether the source (default) translation of the article is out of date
+     */
     private Boolean outdated;
 
-    /** An array of label names associated with this article. By default no label names are used. Only available on certain plans */
+    /**
+     * An array of label names associated with this article. By default no label names are used. Only available on
+     * certain plans
+     */
     @JsonProperty("label_names")
     private List<String> labelNames;
 
-    /** True if the translation for the current locale is a draft; false otherwise. false by default. */
+    /**
+     * True if the translation for the current locale is a draft; false otherwise. false by default.
+     */
     private Boolean draft;
 
-    /** True if this article is promoted; false otherwise. false by default */
+    /**
+     * True if this article is promoted; false otherwise. false by default
+     */
     private Boolean promoted;
 
-    /** The position of this article in the article list. 0 by default */
+    /**
+     * The position of this article in the article list. 0 by default
+     */
     private Long position;
 
-    /** The total sum of votes on this article */
+    /**
+     * The total sum of votes on this article
+     */
     @JsonProperty("vote_sum")
     private Long voteSum;
 
-    /** The number of votes cast on this article */
+    /**
+     * The number of votes cast on this article
+     */
     @JsonProperty("vote_count")
     private Long voteCount;
 
-    /** The id of the section to which this article belongs */
+    /**
+     * The id of the section to which this article belongs
+     */
     @JsonProperty("section_id")
     private Long sectionId;
 
-    /** The time the article was created */
+    /**
+     * The time the article was created
+     */
     @JsonProperty("created_at")
     private Date createdAt;
 
-    /** The time the article was last updated */
+    /**
+     * The time the article was last updated
+     */
     @JsonProperty("updated_at")
     private Date updatedAt;
 
diff --git a/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachments.java b/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachments.java
index 52e664a..d8cedfd 100644
--- a/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachments.java
+++ b/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachments.java
@@ -7,54 +7,54 @@ import java.util.Date;
 public class ArticleAttachments {
 
     /**
-     *  Automatically assigned when the article attachment is created
+     * Automatically assigned when the article attachment is created
      */
     private int id;
 
     /**
-     *  The API url of this article attachment
+     * The API url of this article attachment
      */
     private String url;
 
     /**
-     *  Id of the associated article, if present
+     * Id of the associated article, if present
      */
     private int articleId;
 
     /**
-     *  The name of the file
+     * The name of the file
      */
     private String fileName;
 
     /**
-     *  A full URL where the attachment file can be downloaded
+     * A full URL where the attachment file can be downloaded
      */
     private String contentUrl;
 
     /**
-     *  The content type of the file. Example: image/png
+     * The content type of the file. Example: image/png
      */
     private String contentType;
 
     /**
-     *  The size of the attachment file in bytes
+     * The size of the attachment file in bytes
      */
     private int size;
 
     /**
-     *  If true, the attached file is shown in the dedicated admin UI for inline attachments and
-     *  its url can be referenced in the HTML body of the article.
-     *  If false, the attachment is listed in the list of attachments. Default is false
+     * If true, the attached file is shown in the dedicated admin UI for inline attachments and
+     * its url can be referenced in the HTML body of the article.
+     * If false, the attachment is listed in the list of attachments. Default is false
      */
     private boolean inline;
 
     /**
-     *  The time at which the article attachment was created
+     * The time at which the article attachment was created
      */
     private Date createdAt;
 
     /**
-     *  The time at which the article attachment was last updated
+     * The time at which the article attachment was last updated
      */
     private Date updatedAt;
 
diff --git a/src/main/java/org/zendesk/client/v2/model/hc/Category.java b/src/main/java/org/zendesk/client/v2/model/hc/Category.java
index 9d7feda..f409972 100644
--- a/src/main/java/org/zendesk/client/v2/model/hc/Category.java
+++ b/src/main/java/org/zendesk/client/v2/model/hc/Category.java
@@ -6,44 +6,68 @@ import java.util.Date;
 import java.util.List;
 
 public class Category {
-    /** Automatically assigned when creating categories */
+    /**
+     * Automatically assigned when creating categories
+     */
     private Long id;
 
-    /** The name of the category */
+    /**
+     * The name of the category
+     */
     private String name;
 
-    /** The description of the category */
+    /**
+     * The description of the category
+     */
     private String description;
 
-    /** The locale that the category is being displayed in */
+    /**
+     * The locale that the category is being displayed in
+     */
     private String locale;
 
-    /** The source (default) locale of the category */
+    /**
+     * The source (default) locale of the category
+     */
     @JsonProperty("source_locale")
     private String sourceLocale;
 
-    /** The API url of this category */
+    /**
+     * The API url of this category
+     */
     private String url;
 
-    /** The url of this category in Help Center */
+    /**
+     * The url of this category in Help Center
+     */
     @JsonProperty("html_url")
     private String htmlUrl;
 
-    /** Whether the category is out of date */
+    /**
+     * Whether the category is out of date
+     */
     private Boolean outdated;
 
-    /** The position of this category relative to other categories */
+    /**
+     * The position of this category relative to other categories
+     */
     private Long position;
 
-    /** The ids of all translations of this category */
+    /**
+     * The ids of all translations of this category
+     */
     @JsonProperty("translation_ids")
     private List<String> translation_ids;
 
-    /** The time the category was created */
+    /**
+     * The time the category was created
+     */
     @JsonProperty("created_at")
     private Date createdAt;
 
-    /** The time the category was last updated */
+    /**
+     * The time the category was last updated
+     */
     @JsonProperty("updated_at")
     private Date updatedAt;
 
diff --git a/src/main/java/org/zendesk/client/v2/model/hc/Section.java b/src/main/java/org/zendesk/client/v2/model/hc/Section.java
index 74c15a3..3a3754a 100644
--- a/src/main/java/org/zendesk/client/v2/model/hc/Section.java
+++ b/src/main/java/org/zendesk/client/v2/model/hc/Section.java
@@ -6,45 +6,69 @@ import java.util.Date;
 import java.util.List;
 
 public class Section {
-    /** Automatically assigned when creating subscriptions */
+    /**
+     * Automatically assigned when creating subscriptions
+     */
     private Long id;
 
-    /** The name of the section */
+    /**
+     * The name of the section
+     */
     private String name;
 
-    /** The locale in which the section is displayed */
+    /**
+     * The locale in which the section is displayed
+     */
     private String locale;
 
-    /** The source (default) locale of the section */
+    /**
+     * The source (default) locale of the section
+     */
     @JsonProperty("source_locale")
     private String sourceLocale;
 
-    /** The API url of this section */
+    /**
+     * The API url of this section
+     */
     private String url;
 
-    /** The url of this section in Help Center */
+    /**
+     * The url of this section in Help Center
+     */
     @JsonProperty("html_url")
     private String htmlUrl;
 
-    /** The id of the category to which this section belongs */
+    /**
+     * The id of the category to which this section belongs
+     */
     @JsonProperty("category_id")
     private String categoryId;
 
-    /** Whether the section is out of date */
+    /**
+     * Whether the section is out of date
+     */
     private Boolean outdated;
 
-    /** The position of this section in the section list. By default the section is added to the end of the list */
+    /**
+     * The position of this section in the section list. By default the section is added to the end of the list
+     */
     private Long position;
 
-    /** The ids of all translations of this section */
+    /**
+     * The ids of all translations of this section
+     */
     @JsonProperty("translation_ids")
     private List<String> translation_ids;
 
-    /** The time the section was created */
+    /**
+     * The time the section was created
+     */
     @JsonProperty("created_at")
     private Date createdAt;
 
-    /** The time the section was last updated */
+    /**
+     * The time the section was last updated
+     */
     @JsonProperty("updated_at")
     private Date updatedAt;
 
diff --git a/src/main/java/org/zendesk/client/v2/model/hc/Translation.java b/src/main/java/org/zendesk/client/v2/model/hc/Translation.java
index 9b7f054..f01634e 100644
--- a/src/main/java/org/zendesk/client/v2/model/hc/Translation.java
+++ b/src/main/java/org/zendesk/client/v2/model/hc/Translation.java
@@ -1,187 +1,188 @@
 package org.zendesk.client.v2.model.hc;
 
-import java.util.Date;
-
 import com.fasterxml.jackson.annotation.JsonProperty;
 
+import java.util.Date;
+
 public class Translation {
-  /* Automatically assigned when a translation is created */
-  private Long id;
+    /* Automatically assigned when a translation is created */
+    private Long id;
+
+    /* The API url of the translation */
+    private String url;
 
-  /* The API url of the translation */
-  private String url;
+    /* The url of the translation in Help Center */
+    @JsonProperty("html_url")
+    private String htmlUrl;
 
-  /* The url of the translation in Help Center */
-  @JsonProperty("html_url")
-  private String htmlUrl;
+    /* The id of the item that has this translation */
+    @JsonProperty("source_id")
+    private Long sourceId;
 
-  /* The id of the item that has this translation */
-  @JsonProperty("source_id")
-  private Long sourceId;
+    /* The type of the item that has this translation. Can be Article, Section, orCategory */
+    @JsonProperty("source_type")
+    private String sourceType;
 
-  /* The type of the item that has this translation. Can be Article, Section, orCategory */
-  @JsonProperty("source_type")
-  private String sourceType;
+    /* The locale of the translation */
+    private String locale;
 
-  /* The locale of the translation */
-  private String locale;
+    /* The title of the translation */
+    private String title;
 
-  /* The title of the translation */
-  private String title;
+    /* The body of the translation. Empty by default */
+    private String body;
 
-  /* The body of the translation. Empty by default */
-  private String body;
+    /* True if the translation is outdated; false otherwise. False by default */
+    private boolean outdated;
 
-  /* True if the translation is outdated; false otherwise. False by default */
-  private boolean outdated;
+    /* True if the translation is a draft; false otherwise. False by default */
+    private boolean draft;
 
-  /* True if the translation is a draft; false otherwise. False by default */
-  private boolean draft;
+    /* The time at which the translation was created */
+    @JsonProperty("created_at")
+    private Date createdAt;
 
-  /* The time at which the translation was created */
-  @JsonProperty("created_at")
-  private Date createdAt;
+    /* The time at which the translation was last updated */
+    @JsonProperty("updated_at")
+    private Date updatedAt;
 
-  /* The time at which the translation was last updated */
-  @JsonProperty("updated_at")
-  private Date updatedAt;
+    /* The id of the user who last updated the translation */
+    @JsonProperty("updated_by_id")
+    private Long updatedById;
 
-  /* The id of the user who last updated the translation */
-  @JsonProperty("updated_by_id")
-  private Long updatedById;
+    /* The id of the user who created the translation */
+    @JsonProperty("created_by_id")
+    private Long createdById;
 
-  /* The id of the user who created the translation */
-  @JsonProperty("created_by_id")
-  private Long createdById;
+    public Long getId() {
+        return id;
+    }
 
-  public Long getId() {
-      return id;
-  }
+    public void setId(Long id) {
+        this.id = id;
+    }
 
-  public void setId( Long id ) {
-      this.id = id;
-  }
+    public String getUrl() {
+        return url;
+    }
 
-  public String getUrl() {
-      return url;
-  }
+    public void setUrl(String url) {
+        this.url = url;
+    }
 
-  public void setUrl( String url ) {
-      this.url = url;
-  }
+    public String getHtmlUrl() {
+        return htmlUrl;
+    }
 
-  public String getHtmlUrl() {
-      return htmlUrl;
-  }
-
-  public void setHtmlUrl( String htmlUrl ) {
-      this.htmlUrl = htmlUrl;
-  }
-
-  public Long getSourceId() {
-      return sourceId;
-  }
-
-  public void setSourceId( Long sourceId ) {
-      this.sourceId = sourceId;
-  }
-
-  public String getSourceType() {
-      return sourceType;
-  }
-
-  public void setSourceType( String sourceType ) {
-      this.sourceType = sourceType;
-  }
-
-  public String getLocale() {
-      return locale;
-  }
-
-  public void setLocale( String locale ) {
-      this.locale = locale;
-  }
-
-  public String getTitle() {
-      return title;
-  }
-
-  public void setTitle( String title ) {
-      this.title = title;
-  }
-
-  public String getBody() {
-      return body;
-  }
-
-  public void setBody( String body ) {
-      this.body = body;
-  }
-
-  public boolean isOutdated() {
-      return outdated;
-  }
-
-  public void setOutdated( boolean outdated ) {
-      this.outdated = outdated;
-  }
-
-  public boolean isDraft() {
-      return draft;
-  }
-
-  public void setDraft( boolean draft ) {
-      this.draft = draft;
-  }
-
-  public Date getCreatedAt() {
-      return createdAt;
-  }
-
-  public void setCreatedAt( Date createdAt ) {
-      this.createdAt = createdAt;
-  }
-
-  public Date getUpdatedAt() {
-      return updatedAt;
-  }
-
-  public void setUpdatedAt( Date updatedAt ) {
-      this.updatedAt = updatedAt;
-  }
-
-  public Long getUpdatedById() {
-      return updatedById;
-  }
-
-  public void setUpdatedById( Long updatedById ) {
-      this.updatedById = updatedById;
-  }
-
-  public Long getCreatedById() {
-      return createdById;
-  }
-
-  public void setCreatedById( Long createdById ) {
-      this.createdById = createdById;
-  }
-  @Override
-  public String toString() {
-      return "Translation{" +
-          "id=" + id + '\'' +
-          ", url=" + url + '\'' +
-          ", htmlUrl=" + htmlUrl + '\'' +
-          ", sourceId=" + sourceId + '\'' +
-          ", sourceType=" + sourceType + '\'' +
-          ", locale=" + locale + '\'' +
-          ", title=" + title + '\'' +
-          ", body=" + body + '\'' +
-          ", outdated=" + outdated + '\'' +
-          ", draft=" + draft + '\'' +
-          ", createdAt=" + createdAt + '\'' +
-          ", updatedAt=" + updatedAt + '\'' +
-          ", updatedById=" + updatedById + '\'' +
-          ", createdById=" + createdById + '\'' +
-          '}';
-  }
+    public void setHtmlUrl(String htmlUrl) {
+        this.htmlUrl = htmlUrl;
+    }
+
+    public Long getSourceId() {
+        return sourceId;
+    }
+
+    public void setSourceId(Long sourceId) {
+        this.sourceId = sourceId;
+    }
+
+    public String getSourceType() {
+        return sourceType;
+    }
+
+    public void setSourceType(String sourceType) {
+        this.sourceType = sourceType;
+    }
+
+    public String getLocale() {
+        return locale;
+    }
+
+    public void setLocale(String locale) {
+        this.locale = locale;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getBody() {
+        return body;
+    }
+
+    public void setBody(String body) {
+        this.body = body;
+    }
+
+    public boolean isOutdated() {
+        return outdated;
+    }
+
+    public void setOutdated(boolean outdated) {
+        this.outdated = outdated;
+    }
+
+    public boolean isDraft() {
+        return draft;
+    }
+
+    public void setDraft(boolean draft) {
+        this.draft = draft;
+    }
+
+    public Date getCreatedAt() {
+        return createdAt;
+    }
+
+    public void setCreatedAt(Date createdAt) {
+        this.createdAt = createdAt;
+    }
+
+    public Date getUpdatedAt() {
+        return updatedAt;
+    }
+
+    public void setUpdatedAt(Date updatedAt) {
+        this.updatedAt = updatedAt;
+    }
+
+    public Long getUpdatedById() {
+        return updatedById;
+    }
+
+    public void setUpdatedById(Long updatedById) {
+        this.updatedById = updatedById;
+    }
+
+    public Long getCreatedById() {
+        return createdById;
+    }
+
+    public void setCreatedById(Long createdById) {
+        this.createdById = createdById;
+    }
+
+    @Override
+    public String toString() {
+        return "Translation{" +
+                "id=" + id + '\'' +
+                ", url=" + url + '\'' +
+                ", htmlUrl=" + htmlUrl + '\'' +
+                ", sourceId=" + sourceId + '\'' +
+                ", sourceType=" + sourceType + '\'' +
+                ", locale=" + locale + '\'' +
+                ", title=" + title + '\'' +
+                ", body=" + body + '\'' +
+                ", outdated=" + outdated + '\'' +
+                ", draft=" + draft + '\'' +
+                ", createdAt=" + createdAt + '\'' +
+                ", updatedAt=" + updatedAt + '\'' +
+                ", updatedById=" + updatedById + '\'' +
+                ", createdById=" + createdById + '\'' +
+                '}';
+    }
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/targets/BasecampTarget.java b/src/main/java/org/zendesk/client/v2/model/targets/BasecampTarget.java
index 0dcc176..f30ab28 100644
--- a/src/main/java/org/zendesk/client/v2/model/targets/BasecampTarget.java
+++ b/src/main/java/org/zendesk/client/v2/model/targets/BasecampTarget.java
@@ -6,107 +6,107 @@ import com.fasterxml.jackson.annotation.JsonProperty;
  * @author adavidson
  */
 public class BasecampTarget extends Target {
-   private String targetUrl;
-   private String token;
-   private String projectId;
-   private String username;
-   private String password;
-   private String resource;
-   private String messageId;
-   private String todoListId;
-
-   @Override
-   public String getType() {
-      return "basecamp_target";
-   }
-
-   @JsonProperty("project_id")
-   public String getProjectId() {
-      return projectId;
-   }
-
-   public void setProjectId(String projectId) {
-      this.projectId = projectId;
-   }
-
-   @JsonProperty("message_id")
-   public String getMessageId() {
-      return messageId;
-   }
-
-   public void setMessageId(String messageId) {
-      this.messageId = messageId;
-   }
-   
-   @JsonProperty("todo_list_id")
-   public String getTodoListId() {
-      return todoListId;
-   }
-
-   public void setTodoListId(String todoListId) {
-      this.todoListId = todoListId;
-   }
-
-   @JsonProperty("target_url")
-   public String getTargetUrl() {
-      return targetUrl;
-   }
-
-   public void setTargetUrl(String targetUrl) {
-      this.targetUrl = targetUrl;
-   }
-
-   public String getUsername() {
-      return username;
-   }
-
-   public void setUsername(String username) {
-      this.username = username;
-   }
-
-   public String getPassword() {
-      return password;
-   }
-
-   public void setPassword(String password) {
-      this.password = password;
-   }
-
-   public String getToken() {
-      return token;
-   }
-
-   public void setToken(String token) {
-      this.token = token;
-   }
-
-   public String getResource() {
-      return resource;
-   }
-
-   public void setResource(String resource) {
-      this.resource = resource;
-   }
-
-   @Override
-   public String toString() {
-      final StringBuilder sb = new StringBuilder();
-      sb.append("UrlTarget");
-      sb.append("{id=").append(getId());
-      sb.append(", title=").append(getTitle());
-      sb.append(", type=").append(getType());
-      sb.append(", active=").append(isActive());
-      sb.append(", createdAt=").append(getCreatedAt());
-      sb.append(", targetUrl=").append(targetUrl);
-      sb.append(", token=").append(token);
-      sb.append(", projectId=").append(projectId);
-      sb.append(", resource=").append(resource);
-      sb.append(", messageId=").append(messageId);
-      sb.append(", todoListId=").append(todoListId);
-      sb.append(", username=").append(username);
-      sb.append(", password=").append(password);
-      sb.append('}');
-      return sb.toString();
-   }
+    private String targetUrl;
+    private String token;
+    private String projectId;
+    private String username;
+    private String password;
+    private String resource;
+    private String messageId;
+    private String todoListId;
+
+    @Override
+    public String getType() {
+        return "basecamp_target";
+    }
+
+    @JsonProperty("project_id")
+    public String getProjectId() {
+        return projectId;
+    }
+
+    public void setProjectId(String projectId) {
+        this.projectId = projectId;
+    }
+
+    @JsonProperty("message_id")
+    public String getMessageId() {
+        return messageId;
+    }
+
+    public void setMessageId(String messageId) {
+        this.messageId = messageId;
+    }
+
+    @JsonProperty("todo_list_id")
+    public String getTodoListId() {
+        return todoListId;
+    }
+
+    public void setTodoListId(String todoListId) {
+        this.todoListId = todoListId;
+    }
+
+    @JsonProperty("target_url")
+    public String getTargetUrl() {
+        return targetUrl;
+    }
+
+    public void setTargetUrl(String targetUrl) {
+        this.targetUrl = targetUrl;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public String getToken() {
+        return token;
+    }
+
+    public void setToken(String token) {
+        this.token = token;
+    }
+
+    public String getResource() {
+        return resource;
+    }
+
+    public void setResource(String resource) {
+        this.resource = resource;
+    }
+
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("UrlTarget");
+        sb.append("{id=").append(getId());
+        sb.append(", title=").append(getTitle());
+        sb.append(", type=").append(getType());
+        sb.append(", active=").append(isActive());
+        sb.append(", createdAt=").append(getCreatedAt());
+        sb.append(", targetUrl=").append(targetUrl);
+        sb.append(", token=").append(token);
+        sb.append(", projectId=").append(projectId);
+        sb.append(", resource=").append(resource);
+        sb.append(", messageId=").append(messageId);
+        sb.append(", todoListId=").append(todoListId);
+        sb.append(", username=").append(username);
+        sb.append(", password=").append(password);
+        sb.append('}');
+        return sb.toString();
+    }
 
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/targets/CampfireTarget.java b/src/main/java/org/zendesk/client/v2/model/targets/CampfireTarget.java
index c450a63..e1c4f9b 100644
--- a/src/main/java/org/zendesk/client/v2/model/targets/CampfireTarget.java
+++ b/src/main/java/org/zendesk/client/v2/model/targets/CampfireTarget.java
@@ -6,75 +6,75 @@ import com.fasterxml.jackson.annotation.JsonProperty;
  * @author adavidson
  */
 public class CampfireTarget extends Target {
-   private String  subdomain;
-   private boolean ssl;
-   private boolean preserveFormat;
-   private String  token;
-   private String  room;
+    private String subdomain;
+    private boolean ssl;
+    private boolean preserveFormat;
+    private String token;
+    private String room;
 
-   @Override
-   public String getType() {
-      return "campfire_target";
-   }
+    @Override
+    public String getType() {
+        return "campfire_target";
+    }
 
-   @Override
-   public String toString() {
-      final StringBuilder sb = new StringBuilder();
-      sb.append("UrlTarget");
-      sb.append("{id=").append(getId());
-      sb.append(", title=").append(getTitle());
-      sb.append(", type=").append(getType());
-      sb.append(", active=").append(isActive());
-      sb.append(", createdAt=").append(getCreatedAt());
-      sb.append(", subdomain=").append(subdomain);
-      sb.append(", token=").append(token);
-      sb.append(", ssl=").append(ssl);
-      sb.append(", preserveFormat=").append(preserveFormat);
-      sb.append(", token=").append(token);
-      sb.append(", room=").append(room);
-      sb.append('}');
-      return sb.toString();
-   }
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("UrlTarget");
+        sb.append("{id=").append(getId());
+        sb.append(", title=").append(getTitle());
+        sb.append(", type=").append(getType());
+        sb.append(", active=").append(isActive());
+        sb.append(", createdAt=").append(getCreatedAt());
+        sb.append(", subdomain=").append(subdomain);
+        sb.append(", token=").append(token);
+        sb.append(", ssl=").append(ssl);
+        sb.append(", preserveFormat=").append(preserveFormat);
+        sb.append(", token=").append(token);
+        sb.append(", room=").append(room);
+        sb.append('}');
+        return sb.toString();
+    }
 
-   public String getSubdomain() {
-      return subdomain;
-   }
+    public String getSubdomain() {
+        return subdomain;
+    }
 
-   public void setSubdomain(String subdomain) {
-      this.subdomain = subdomain;
-   }
+    public void setSubdomain(String subdomain) {
+        this.subdomain = subdomain;
+    }
 
-   public boolean isSsl() {
-      return ssl;
-   }
+    public boolean isSsl() {
+        return ssl;
+    }
 
-   public void setSsl(boolean ssl) {
-      this.ssl = ssl;
-   }
+    public void setSsl(boolean ssl) {
+        this.ssl = ssl;
+    }
 
-   @JsonProperty("preserve_format")
-   public boolean isPreserveFormat() {
-      return preserveFormat;
-   }
+    @JsonProperty("preserve_format")
+    public boolean isPreserveFormat() {
+        return preserveFormat;
+    }
 
-   public void setPreserveFormat(boolean preserveFormat) {
-      this.preserveFormat = preserveFormat;
-   }
+    public void setPreserveFormat(boolean preserveFormat) {
+        this.preserveFormat = preserveFormat;
+    }
 
-   public String getToken() {
-      return token;
-   }
+    public String getToken() {
+        return token;
+    }
 
-   public void setToken(String token) {
-      this.token = token;
-   }
+    public void setToken(String token) {
+        this.token = token;
+    }
 
-   public String getRoom() {
-      return room;
-   }
+    public String getRoom() {
+        return room;
+    }
 
-   public void setRoom(String room) {
-      this.room = room;
-   }
+    public void setRoom(String room) {
+        this.room = room;
+    }
 
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/targets/EmailTarget.java b/src/main/java/org/zendesk/client/v2/model/targets/EmailTarget.java
index 627afd6..3381cb1 100644
--- a/src/main/java/org/zendesk/client/v2/model/targets/EmailTarget.java
+++ b/src/main/java/org/zendesk/client/v2/model/targets/EmailTarget.java
@@ -4,43 +4,43 @@ package org.zendesk.client.v2.model.targets;
  * @author adavidson
  */
 public class EmailTarget extends Target {
-   private String email;
-   private String subject;
-
-   @Override
-   public String getType() {
-      return "email_target";
-   }
-
-   @Override
-   public String toString() {
-      final StringBuilder sb = new StringBuilder();
-      sb.append("UrlTarget");
-      sb.append("{id=").append(getId());
-      sb.append(", title=").append(getTitle());
-      sb.append(", type=").append(getType());
-      sb.append(", active=").append(isActive());
-      sb.append(", createdAt=").append(getCreatedAt());
-      sb.append(", email=").append(email);
-      sb.append(", subject=").append(subject);
-      sb.append('}');
-      return sb.toString();
-   }
-
-   public String getEmail() {
-      return email;
-   }
-
-   public void setEmail(String email) {
-      this.email = email;
-   }
-
-   public String getSubject() {
-      return subject;
-   }
-
-   public void setSubject(String subject) {
-      this.subject = subject;
-   }
+    private String email;
+    private String subject;
+
+    @Override
+    public String getType() {
+        return "email_target";
+    }
+
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("UrlTarget");
+        sb.append("{id=").append(getId());
+        sb.append(", title=").append(getTitle());
+        sb.append(", type=").append(getType());
+        sb.append(", active=").append(isActive());
+        sb.append(", createdAt=").append(getCreatedAt());
+        sb.append(", email=").append(email);
+        sb.append(", subject=").append(subject);
+        sb.append('}');
+        return sb.toString();
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getSubject() {
+        return subject;
+    }
+
+    public void setSubject(String subject) {
+        this.subject = subject;
+    }
 
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/targets/PivotalTarget.java b/src/main/java/org/zendesk/client/v2/model/targets/PivotalTarget.java
index 62c3fa1..6dd35dd 100644
--- a/src/main/java/org/zendesk/client/v2/model/targets/PivotalTarget.java
+++ b/src/main/java/org/zendesk/client/v2/model/targets/PivotalTarget.java
@@ -6,99 +6,99 @@ import com.fasterxml.jackson.annotation.JsonProperty;
  * @author adavidson
  */
 public class PivotalTarget extends Target {
-   private String token;
-   private String projectId;
-   private String storyType;
-   private String storyTitle;
-   private String requestedBy;
-   private String ownerBy;
-   private String storyLabels;
-
-   @Override
-   public String getType() {
-      return "pivotal_target";
-   }
-
-   @Override
-   public String toString() {
-      final StringBuilder sb = new StringBuilder();
-      sb.append("UrlTarget");
-      sb.append("{id=").append(getId());
-      sb.append(", title=").append(getTitle());
-      sb.append(", type=").append(getType());
-      sb.append(", active=").append(isActive());
-      sb.append(", createdAt=").append(getCreatedAt());
-      sb.append(", token=").append(token);
-      sb.append(", projectId=").append(projectId);
-      sb.append(", storyType=").append(storyType);
-      sb.append(", storyTitle=").append(storyTitle);
-      sb.append(", requestedBy=").append(requestedBy);
-      sb.append(", ownerBy=").append(ownerBy);
-      sb.append(", storyLabels=").append(storyLabels);
-      sb.append('}');
-      return sb.toString();
-   }
-
-   public String getToken() {
-      return token;
-   }
-
-   public void setToken(String token) {
-      this.token = token;
-   }
-
-   @JsonProperty("project_id")
-   public String getProjectId() {
-      return projectId;
-   }
-
-   public void setProjectId(String projectId) {
-      this.projectId = projectId;
-   }
-
-   @JsonProperty("story_type")
-   public String getStoryType() {
-      return storyType;
-   }
-
-   public void setStoryType(String storyType) {
-      this.storyType = storyType;
-   }
-
-   @JsonProperty("story_title")
-   public String getStoryTitle() {
-      return storyTitle;
-   }
-
-   public void setStoryTitle(String storyTitle) {
-      this.storyTitle = storyTitle;
-   }
-
-   @JsonProperty("requested_by")
-   public String getRequestedBy() {
-      return requestedBy;
-   }
-
-   public void setRequestedBy(String requestedBy) {
-      this.requestedBy = requestedBy;
-   }
-
-   @JsonProperty("owner_by")
-   public String getOwnerBy() {
-      return ownerBy;
-   }
-
-   public void setOwnerBy(String ownerBy) {
-      this.ownerBy = ownerBy;
-   }
-
-   @JsonProperty("storey_labels")
-   public String getStoryLabels() {
-      return storyLabels;
-   }
-
-   public void setStoryLabels(String storyLabels) {
-      this.storyLabels = storyLabels;
-   }
+    private String token;
+    private String projectId;
+    private String storyType;
+    private String storyTitle;
+    private String requestedBy;
+    private String ownerBy;
+    private String storyLabels;
+
+    @Override
+    public String getType() {
+        return "pivotal_target";
+    }
+
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("UrlTarget");
+        sb.append("{id=").append(getId());
+        sb.append(", title=").append(getTitle());
+        sb.append(", type=").append(getType());
+        sb.append(", active=").append(isActive());
+        sb.append(", createdAt=").append(getCreatedAt());
+        sb.append(", token=").append(token);
+        sb.append(", projectId=").append(projectId);
+        sb.append(", storyType=").append(storyType);
+        sb.append(", storyTitle=").append(storyTitle);
+        sb.append(", requestedBy=").append(requestedBy);
+        sb.append(", ownerBy=").append(ownerBy);
+        sb.append(", storyLabels=").append(storyLabels);
+        sb.append('}');
+        return sb.toString();
+    }
+
+    public String getToken() {
+        return token;
+    }
+
+    public void setToken(String token) {
+        this.token = token;
+    }
+
+    @JsonProperty("project_id")
+    public String getProjectId() {
+        return projectId;
+    }
+
+    public void setProjectId(String projectId) {
+        this.projectId = projectId;
+    }
+
+    @JsonProperty("story_type")
+    public String getStoryType() {
+        return storyType;
+    }
+
+    public void setStoryType(String storyType) {
+        this.storyType = storyType;
+    }
+
+    @JsonProperty("story_title")
+    public String getStoryTitle() {
+        return storyTitle;
+    }
+
+    public void setStoryTitle(String storyTitle) {
+        this.storyTitle = storyTitle;
+    }
+
+    @JsonProperty("requested_by")
+    public String getRequestedBy() {
+        return requestedBy;
+    }
+
+    public void setRequestedBy(String requestedBy) {
+        this.requestedBy = requestedBy;
+    }
+
+    @JsonProperty("owner_by")
+    public String getOwnerBy() {
+        return ownerBy;
+    }
+
+    public void setOwnerBy(String ownerBy) {
+        this.ownerBy = ownerBy;
+    }
+
+    @JsonProperty("storey_labels")
+    public String getStoryLabels() {
+        return storyLabels;
+    }
+
+    public void setStoryLabels(String storyLabels) {
+        this.storyLabels = storyLabels;
+    }
 
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/targets/Target.java b/src/main/java/org/zendesk/client/v2/model/targets/Target.java
index b0de534..a223048 100644
--- a/src/main/java/org/zendesk/client/v2/model/targets/Target.java
+++ b/src/main/java/org/zendesk/client/v2/model/targets/Target.java
@@ -3,68 +3,68 @@ package org.zendesk.client.v2.model.targets;
 import java.util.Date;
 
 /**
- * https://developer.zendesk.com/rest_api/docs/core/targets 
- * 
+ * https://developer.zendesk.com/rest_api/docs/core/targets
+ *
  * @author adavidson
  */
 public class Target {
-   private Long    id;
-   private String  title;
-   private String  type;
-   private boolean active;
-   private Date    createdAt;
+    private Long id;
+    private String title;
+    private String type;
+    private boolean active;
+    private Date createdAt;
 
-   public Long getId() {
-      return id;
-   }
+    public Long getId() {
+        return id;
+    }
 
-   public void setId(Long id) {
-      this.id = id;
-   }
+    public void setId(Long id) {
+        this.id = id;
+    }
 
-   public String getTitle() {
-      return title;
-   }
+    public String getTitle() {
+        return title;
+    }
 
-   public void setTitle(String title) {
-      this.title = title;
-   }
+    public void setTitle(String title) {
+        this.title = title;
+    }
 
-   public String getType() {
-      return type;
-   }
+    public String getType() {
+        return type;
+    }
 
-   public void setType(String type) {
-      this.type = type;
-   }
+    public void setType(String type) {
+        this.type = type;
+    }
 
-   public boolean isActive() {
-      return active;
-   }
+    public boolean isActive() {
+        return active;
+    }
 
-   public void setActive(boolean active) {
-      this.active = active;
-   }
+    public void setActive(boolean active) {
+        this.active = active;
+    }
 
-   public Date getCreatedAt() {
-      return createdAt;
-   }
+    public Date getCreatedAt() {
+        return createdAt;
+    }
 
-   public void setCreatedAt(Date createdAt) {
-      this.createdAt = createdAt;
-   }
+    public void setCreatedAt(Date createdAt) {
+        this.createdAt = createdAt;
+    }
 
-   @Override
-   public String toString() {
-      final StringBuilder sb = new StringBuilder();
-      sb.append("Target");
-      sb.append("{id=").append(id);
-      sb.append(", title=").append(title);
-      sb.append(", type=").append(type);
-      sb.append(", active=").append(active);
-      sb.append(", createdAt=").append(createdAt);
-      sb.append('}');
-      return sb.toString();
-   }
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("Target");
+        sb.append("{id=").append(id);
+        sb.append(", title=").append(title);
+        sb.append(", type=").append(type);
+        sb.append(", active=").append(active);
+        sb.append(", createdAt=").append(createdAt);
+        sb.append('}');
+        return sb.toString();
+    }
 
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/targets/TwitterTarget.java b/src/main/java/org/zendesk/client/v2/model/targets/TwitterTarget.java
index 297d9ab..b929b67 100644
--- a/src/main/java/org/zendesk/client/v2/model/targets/TwitterTarget.java
+++ b/src/main/java/org/zendesk/client/v2/model/targets/TwitterTarget.java
@@ -4,44 +4,44 @@ package org.zendesk.client.v2.model.targets;
  * @author adavidson
  */
 public class TwitterTarget extends Target {
-   private String token;
-   private String secret;
-
-   @Override
-   public String getType() {
-      return "twitter_target";
-   }
-
-   @Override
-   public String toString() {
-      final StringBuilder sb = new StringBuilder();
-      sb.append("UrlTarget");
-      sb.append("{id=").append(getId());
-      sb.append(", title=").append(getTitle());
-      sb.append(", type=").append(getType());
-      sb.append(", active=").append(isActive());
-      sb.append(", createdAt=").append(getCreatedAt());
-      sb.append(", token=").append(token);
-      sb.append(", secret=").append(secret);
-      sb.append('}');
-      return sb.toString();
-   }
-
-   public String getToken() {
-      return token;
-   }
-
-   public void setToken(String token) {
-      this.token = token;
-   }
-
-   public String getSecret() {
-      return secret;
-   }
-
-   public void setSecret(String secret) {
-      this.secret = secret;
-   }
- 
+    private String token;
+    private String secret;
+
+    @Override
+    public String getType() {
+        return "twitter_target";
+    }
+
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("UrlTarget");
+        sb.append("{id=").append(getId());
+        sb.append(", title=").append(getTitle());
+        sb.append(", type=").append(getType());
+        sb.append(", active=").append(isActive());
+        sb.append(", createdAt=").append(getCreatedAt());
+        sb.append(", token=").append(token);
+        sb.append(", secret=").append(secret);
+        sb.append('}');
+        return sb.toString();
+    }
+
+    public String getToken() {
+        return token;
+    }
+
+    public void setToken(String token) {
+        this.token = token;
+    }
+
+    public String getSecret() {
+        return secret;
+    }
+
+    public void setSecret(String secret) {
+        this.secret = secret;
+    }
+
 
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/targets/UrlTarget.java b/src/main/java/org/zendesk/client/v2/model/targets/UrlTarget.java
index c0d95be..17fb3b2 100644
--- a/src/main/java/org/zendesk/client/v2/model/targets/UrlTarget.java
+++ b/src/main/java/org/zendesk/client/v2/model/targets/UrlTarget.java
@@ -6,74 +6,74 @@ import com.fasterxml.jackson.annotation.JsonProperty;
  * @author adavidson
  */
 public class UrlTarget extends Target {
-   private String targetUrl;
-   private String method;
-   private String attribute;
-   private String username;
-   private String password;
+    private String targetUrl;
+    private String method;
+    private String attribute;
+    private String username;
+    private String password;
 
-   @Override
-   public String getType() {
-      return "url_target";
-   }
-   
-   @JsonProperty("target_url")
-   public String getTargetUrl() {
-      return targetUrl;
-   }
+    @Override
+    public String getType() {
+        return "url_target";
+    }
 
-   public void setTargetUrl(String targetUrl) {
-      this.targetUrl = targetUrl;
-   }
+    @JsonProperty("target_url")
+    public String getTargetUrl() {
+        return targetUrl;
+    }
 
-   public String getMethod() {
-      return method;
-   }
+    public void setTargetUrl(String targetUrl) {
+        this.targetUrl = targetUrl;
+    }
 
-   public void setMethod(String method) {
-      this.method = method;
-   }
+    public String getMethod() {
+        return method;
+    }
 
-   public String getAttribute() {
-      return attribute;
-   }
+    public void setMethod(String method) {
+        this.method = method;
+    }
 
-   public void setAttribute(String attribute) {
-      this.attribute = attribute;
-   }
+    public String getAttribute() {
+        return attribute;
+    }
 
-   public String getUsername() {
-      return username;
-   }
+    public void setAttribute(String attribute) {
+        this.attribute = attribute;
+    }
 
-   public void setUsername(String username) {
-      this.username = username;
-   }
+    public String getUsername() {
+        return username;
+    }
 
-   public String getPassword() {
-      return password;
-   }
+    public void setUsername(String username) {
+        this.username = username;
+    }
 
-   public void setPassword(String password) {
-      this.password = password;
-   }
+    public String getPassword() {
+        return password;
+    }
 
-   @Override
-   public String toString() {
-      final StringBuilder sb = new StringBuilder();
-      sb.append("UrlTarget");
-      sb.append("{id=").append(getId());
-      sb.append(", title=").append(getTitle());
-      sb.append(", type=").append(getType());
-      sb.append(", active=").append(isActive());
-      sb.append(", createdAt=").append(getCreatedAt());
-      sb.append(", targetUrl=").append(targetUrl);
-      sb.append(", method=").append(method);
-      sb.append(", attribute=").append(attribute);
-      sb.append(", username=").append(username);
-      sb.append(", password=").append(password);
-      sb.append('}');
-      return sb.toString();
-   }
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append("UrlTarget");
+        sb.append("{id=").append(getId());
+        sb.append(", title=").append(getTitle());
+        sb.append(", type=").append(getType());
+        sb.append(", active=").append(isActive());
+        sb.append(", createdAt=").append(getCreatedAt());
+        sb.append(", targetUrl=").append(targetUrl);
+        sb.append(", method=").append(method);
+        sb.append(", attribute=").append(attribute);
+        sb.append(", username=").append(username);
+        sb.append(", password=").append(password);
+        sb.append('}');
+        return sb.toString();
+    }
 
 }
diff --git a/src/test/java/org/zendesk/client/v2/RealSmokeTest.java b/src/test/java/org/zendesk/client/v2/RealSmokeTest.java
index 5528a8b..515ddca 100644
--- a/src/test/java/org/zendesk/client/v2/RealSmokeTest.java
+++ b/src/test/java/org/zendesk/client/v2/RealSmokeTest.java
@@ -25,26 +25,25 @@ import org.zendesk.client.v2.model.hc.Section;
 import org.zendesk.client.v2.model.hc.Translation;
 import org.zendesk.client.v2.model.targets.Target;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Date;
-import java.util.List;
-import java.util.HashMap;
-import java.util.Properties;
-import java.util.UUID;
-
 import static org.hamcrest.CoreMatchers.anyOf;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.CoreMatchers.nullValue;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNotEquals;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotEquals;
+import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assume.assumeThat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Properties;
+import java.util.UUID;
 
 /**
  * @author stephenc
@@ -75,8 +74,9 @@ public class RealSmokeTest {
 
     public void assumeHaveTokenOrPassword() {
         assumeThat("We have a username", config.getProperty("username"), notNullValue());
-        assumeThat("We have a token or password", config.getProperty("token") != null || config.getProperty("password") != null, is(
-                true));
+        assumeThat("We have a token or password",
+                config.getProperty("token") != null || config.getProperty("password") != null, is(
+                        true));
     }
 
     @After
@@ -124,24 +124,24 @@ public class RealSmokeTest {
         assertThat(ticketForm, notNullValue());
         assertTrue(ticketForm.isEndUserVisible());
     }
- 
+
     @Test
     public void getTicketForms() throws Exception {
         createClientWithTokenOrPassword();
         Iterable<TicketForm> ticketForms = instance.getTicketForms();
         assertTrue(ticketForms.iterator().hasNext());
-        for(TicketForm ticketForm : ticketForms){
-        	assertThat(ticketForm, notNullValue());
+        for (TicketForm ticketForm : ticketForms) {
+            assertThat(ticketForm, notNullValue());
         }
     }
-    
+
     @Test
     @Ignore("Needs specfic ticket form instance")
     public void getTicketFieldsOnForm() throws Exception {
         createClientWithTokenOrPassword();
         TicketForm ticketForm = instance.getTicketForm(27562);
-        for(Integer id :ticketForm.getTicketFieldIds()){
-            Field f = instance.getTicketField(id);  
+        for (Integer id : ticketForm.getTicketFieldIds()) {
+            Field f = instance.getTicketField(id);
             assertNotNull(f);
         }
         assertThat(ticketForm, notNullValue());
@@ -161,7 +161,7 @@ public class RealSmokeTest {
             }
         }
     }
-    
+
     @Test
     @Ignore("Needs test data setup correctly")
     public void getTicketsPagesRequests() throws Exception {
@@ -263,7 +263,8 @@ public class RealSmokeTest {
         Ticket t = new Ticket(
                 new Ticket.Requester(config.getProperty("requester.name"), config.getProperty("requester.email")),
                 "This is a test", new Comment("Please ignore this ticket"));
-        t.setCollaborators(Arrays.asList(new Collaborator("Bob Example", "bob@example.org"), new Collaborator("Alice Example", "alice@example.org")));
+        t.setCollaborators(Arrays.asList(new Collaborator("Bob Example", "bob@example.org"),
+                new Collaborator("Alice Example", "alice@example.org")));
         Ticket ticket = instance.createTicket(t);
         System.out.println(ticket.getId() + " -> " + ticket.getUrl());
         assertThat(ticket.getId(), notNullValue());
@@ -274,7 +275,8 @@ public class RealSmokeTest {
 
             List<User> ticketCollaborators = instance.getTicketCollaborators(ticket.getId());
             assertThat("Collaborators", ticketCollaborators.size(), is(2));
-            assertThat("First Collaborator", ticketCollaborators.get(0).getEmail(), anyOf(is("alice@example.org"), is("bob@example.org")));
+            assertThat("First Collaborator", ticketCollaborators.get(0).getEmail(),
+                    anyOf(is("alice@example.org"), is("bob@example.org")));
         } finally {
             instance.deleteTicket(ticket.getId());
         }
@@ -300,19 +302,20 @@ public class RealSmokeTest {
             ticket = instance.createTicket(t);
             System.out.println(ticket.getId() + " -> " + ticket.getUrl());
             assertThat(ticket.getId(), notNullValue());
-                Ticket t2 = instance.getTicket(ticket.getId());
-                assertThat(t2, notNullValue());
-                assertThat(t2.getId(), is(ticket.getId()));
-                t2.setAssigneeId(instance.getCurrentUser().getId());
-                t2.setStatus(Status.CLOSED);
-                instance.updateTicket(t2);
+            Ticket t2 = instance.getTicket(ticket.getId());
+            assertThat(t2, notNullValue());
+            assertThat(t2.getId(), is(ticket.getId()));
+            t2.setAssigneeId(instance.getCurrentUser().getId());
+            t2.setStatus(Status.CLOSED);
+            instance.updateTicket(t2);
             assertThat(ticket.getSubject(), is(t.getSubject()));
             assertThat(ticket.getRequester(), nullValue());
             assertThat(ticket.getRequesterId(), notNullValue());
             assertThat(ticket.getDescription(), is(t.getComment().getBody()));
             assertThat(instance.getTicket(ticket.getId()), notNullValue());
             firstId = Math.min(ticket.getId(), firstId);
-        } while (ticket.getId() < firstId + 200L); // seed enough data for the paging tests
+        }
+        while (ticket.getId() < firstId + 200L); // seed enough data for the paging tests
     }
 
     @Test
@@ -330,7 +333,7 @@ public class RealSmokeTest {
         createClientWithTokenOrPassword();
         String requesterEmail = config.getProperty("requester.email");
         assumeThat("Must have a requester email", requesterEmail, notNullValue());
-        for (User user : instance.getSearchResults(User.class, "requester:"+requesterEmail)) {
+        for (User user : instance.getSearchResults(User.class, "requester:" + requesterEmail)) {
             assertThat(user.getEmail(), is(requesterEmail));
         }
     }
@@ -513,7 +516,8 @@ public class RealSmokeTest {
         JobStatus result1 = instance.createOrganizations(orgs.subList(0, 2));
         JobStatus result2 = instance.createOrganizations(orgs.subList(2, 5));
 
-        while (result1.getStatus() != JobStatus.JobStatusEnum.completed || result2.getStatus() != JobStatus.JobStatusEnum.completed) {
+        while (result1.getStatus() != JobStatus.JobStatusEnum.completed ||
+                result2.getStatus() != JobStatus.JobStatusEnum.completed) {
             List<JobStatus<HashMap<String, Object>>> results = instance.getJobStatuses(Arrays.asList(result1, result2));
             result1 = results.get(0);
             result2 = results.get(1);
@@ -615,7 +619,7 @@ public class RealSmokeTest {
             if (++categoryCount > 10) {
                 break;
             }
-            for (Translation t: instance.getCategoryTranslations(cat.getId())) {
+            for (Translation t : instance.getCategoryTranslations(cat.getId())) {
                 assertNotNull(t.getId());
                 assertNotNull(t.getTitle());
                 assertNotNull(t.getBody());
@@ -629,7 +633,7 @@ public class RealSmokeTest {
     @Test
     public void getArticlesIncrementally() throws Exception {
         createClientWithTokenOrPassword();
-        final long ONE_WEEK = 7*24*60*60*1000;
+        final long ONE_WEEK = 7 * 24 * 60 * 60 * 1000;
         int count = 0;
         try {
             for (Article t : instance.getArticlesIncrementally(new Date(new Date().getTime() - ONE_WEEK))) {
diff --git a/src/test/java/org/zendesk/client/v2/ZendeskConfig.java b/src/test/java/org/zendesk/client/v2/ZendeskConfig.java
index 4c8a2b1..40fbeb7 100644
--- a/src/test/java/org/zendesk/client/v2/ZendeskConfig.java
+++ b/src/test/java/org/zendesk/client/v2/ZendeskConfig.java
@@ -20,7 +20,7 @@ public final class ZendeskConfig {
     /**
      * Reads variables from a properties file, or if none found, reads from environment variables
      * Environment variables should have a prefix, "ZENDESK_JAVA_CLIENT_TEST_" to be properly used
-     * 
+     *
      * @return A Properties object
      */
     public static Properties load() {
@@ -28,8 +28,8 @@ public final class ZendeskConfig {
         InputStream is = ZendeskConfig.class.getResourceAsStream("/zendesk.properties");
         if (is == null) {
             Map<String, String> systemVars = System.getenv();
-            for(String key : systemVars.keySet()) {
-                if(key.startsWith(ZENDESK_VARIABLE_PREFIX)) {
+            for (String key : systemVars.keySet()) {
+                if (key.startsWith(ZENDESK_VARIABLE_PREFIX)) {
                     // Remove the prefix and normalize the key name
                     String newKey = key.substring(ZENDESK_VARIABLE_PREFIX.length()).toLowerCase();
                     result.put(newKey, systemVars.get(key));
diff --git a/src/test/java/org/zendesk/client/v2/model/EventTest.java b/src/test/java/org/zendesk/client/v2/model/EventTest.java
index 353426d..41fdd82 100644
--- a/src/test/java/org/zendesk/client/v2/model/EventTest.java
+++ b/src/test/java/org/zendesk/client/v2/model/EventTest.java
@@ -1,63 +1,69 @@
 package org.zendesk.client.v2.model;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.Test;
 import org.zendesk.client.v2.model.events.AttachmentRedactionEvent;
 import org.zendesk.client.v2.model.events.CommentRedactionEvent;
 import org.zendesk.client.v2.model.events.Event;
 import org.zendesk.client.v2.model.events.OrganizationActivityEvent;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 
 public class EventTest {
 
-  private Event parseJson( byte[] json ) {
-    ObjectMapper mapper = new ObjectMapper();
-    try {
-      return mapper.readValue( json, Event.class );
-    } catch ( Exception e ) {
-      System.out.println( e );
-      return null;
+    private Event parseJson(byte[] json) {
+        ObjectMapper mapper = new ObjectMapper();
+        try {
+            return mapper.readValue(json, Event.class);
+        } catch (Exception e) {
+            System.out.println(e);
+            return null;
+        }
     }
-  }
 
-  @Test
-  public void testOrganizationActivityEvent() {
-    String json = "{ \"id\": 21337631753, \"type\": \"OrganizationActivity\", \"subject\": \"Custom Subject\", \"body\": \"This is sample data\", \"recipients\": [568628833] }";
-    Event ev = parseJson( json.getBytes() );
-    assertNotNull( ev );
-    assertEquals( OrganizationActivityEvent.class, ev.getClass() );
-    assertEquals( new Long(21337631753L), ev.getId() );
-    assertEquals( "Custom Subject", ((OrganizationActivityEvent) ev).getSubject() );
-    assertEquals( "This is sample data", ((OrganizationActivityEvent) ev).getBody() );
-    assertNotNull( ((OrganizationActivityEvent) ev).getRecipients() );
-    assertEquals( 1, ((OrganizationActivityEvent) ev).getRecipients().size() );
-    assertEquals( new Long(568628833L), ((OrganizationActivityEvent) ev).getRecipients().get(0) );
-    assertEquals( "OrganizationActivityEvent{subject=Custom Subject, body=This is sample data, recipients=[568628833], via=null}", ev.toString() );
-  }
+    @Test
+    public void testOrganizationActivityEvent() {
+        String json =
+                "{ \"id\": 21337631753, \"type\": \"OrganizationActivity\", \"subject\": \"Custom Subject\", " +
+                        "\"body\": \"This is sample data\", \"recipients\": [568628833] }";
+        Event ev = parseJson(json.getBytes());
+        assertNotNull(ev);
+        assertEquals(OrganizationActivityEvent.class, ev.getClass());
+        assertEquals(new Long(21337631753L), ev.getId());
+        assertEquals("Custom Subject", ((OrganizationActivityEvent) ev).getSubject());
+        assertEquals("This is sample data", ((OrganizationActivityEvent) ev).getBody());
+        assertNotNull(((OrganizationActivityEvent) ev).getRecipients());
+        assertEquals(1, ((OrganizationActivityEvent) ev).getRecipients().size());
+        assertEquals(new Long(568628833L), ((OrganizationActivityEvent) ev).getRecipients().get(0));
+        assertEquals(
+                "OrganizationActivityEvent{subject=Custom Subject, body=This is sample data, recipients=[568628833], " +
+                        "via=null}",
+                ev.toString());
+    }
 
-  @Test
-  public void testAttachmentRedactionEvent() {
-    String json = "{ \"id\": 10593649089, \"type\": \"AttachmentRedactionEvent\", \"attachment_id\": 315988189, \"comment_id\": 10591294149 }";
-    Event ev = parseJson( json.getBytes() );
-    assertNotNull( ev );
-    assertEquals( AttachmentRedactionEvent.class, ev.getClass() );
-    assertEquals( new Long(10593649089L), ev.getId() );
-    assertEquals( new Long(315988189L), ((AttachmentRedactionEvent) ev).getAttachmentId() );
-    assertEquals( new Long(10591294149L), ((AttachmentRedactionEvent) ev).getCommentId() );
-    assertEquals( "AttachmentRedactionEvent{attachmentId=315988189, commentId=10591294149}", ev.toString() );
-  }
+    @Test
+    public void testAttachmentRedactionEvent() {
+        String json =
+                "{ \"id\": 10593649089, \"type\": \"AttachmentRedactionEvent\", \"attachment_id\": 315988189, " +
+                        "\"comment_id\": 10591294149 }";
+        Event ev = parseJson(json.getBytes());
+        assertNotNull(ev);
+        assertEquals(AttachmentRedactionEvent.class, ev.getClass());
+        assertEquals(new Long(10593649089L), ev.getId());
+        assertEquals(new Long(315988189L), ((AttachmentRedactionEvent) ev).getAttachmentId());
+        assertEquals(new Long(10591294149L), ((AttachmentRedactionEvent) ev).getCommentId());
+        assertEquals("AttachmentRedactionEvent{attachmentId=315988189, commentId=10591294149}", ev.toString());
+    }
 
-  @Test
-  public void testCommentRedactionEvent() {
-    String json = "{ \"id\": 18231937759, \"type\": \"CommentRedactionEvent\", \"comment_id\": \"18974155255\" }";
-    Event ev = parseJson( json.getBytes() );
-    assertNotNull( ev );
-    assertEquals( CommentRedactionEvent.class, ev.getClass() );
-    assertEquals( new Long(18231937759L), ev.getId() );
-    assertEquals( new Long(18974155255L), ((CommentRedactionEvent) ev).getCommentId() );
-    assertEquals( "CommentRedactionEvent{commentId=18974155255}", ev.toString() );
-  }
+    @Test
+    public void testCommentRedactionEvent() {
+        String json = "{ \"id\": 18231937759, \"type\": \"CommentRedactionEvent\", \"comment_id\": \"18974155255\" }";
+        Event ev = parseJson(json.getBytes());
+        assertNotNull(ev);
+        assertEquals(CommentRedactionEvent.class, ev.getClass());
+        assertEquals(new Long(18231937759L), ev.getId());
+        assertEquals(new Long(18974155255L), ((CommentRedactionEvent) ev).getCommentId());
+        assertEquals("CommentRedactionEvent{commentId=18974155255}", ev.toString());
+    }
 }
diff --git a/src/test/java/org/zendesk/client/v2/model/StatusTest.java b/src/test/java/org/zendesk/client/v2/model/StatusTest.java
index a94c626..384644a 100644
--- a/src/test/java/org/zendesk/client/v2/model/StatusTest.java
+++ b/src/test/java/org/zendesk/client/v2/model/StatusTest.java
@@ -23,6 +23,6 @@ public class StatusTest {
     public void deserializeFromLowercase() throws Exception {
         ObjectMapper mapper = Zendesk.createMapper();
         ObjectReader reader = mapper.reader(Status.class);
-        assertThat(reader.readValue("\"" + Status.PENDING.name().toLowerCase() + "\""), is((Object)Status.PENDING));
+        assertThat(reader.readValue("\"" + Status.PENDING.name().toLowerCase() + "\""), is((Object) Status.PENDING));
     }
 }
-- 
2.7.0


From a27eaa4587e6bf1715bda7ed30b3fbef826c8cd8 Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 12:12:04 -0400
Subject: [PATCH 02/22] add description to Section

---
 src/main/java/org/zendesk/client/v2/model/hc/Section.java | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/src/main/java/org/zendesk/client/v2/model/hc/Section.java b/src/main/java/org/zendesk/client/v2/model/hc/Section.java
index 3a3754a..7f4e223 100644
--- a/src/main/java/org/zendesk/client/v2/model/hc/Section.java
+++ b/src/main/java/org/zendesk/client/v2/model/hc/Section.java
@@ -17,6 +17,11 @@ public class Section {
     private String name;
 
     /**
+     * The description of the section
+     */
+    private String description;
+
+    /**
      * The locale in which the section is displayed
      */
     private String locale;
@@ -88,6 +93,14 @@ public class Section {
         this.name = name;
     }
 
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
     public String getLocale() {
         return locale;
     }
@@ -173,6 +186,7 @@ public class Section {
         return "Section{" +
                 "id=" + id +
                 ", name='" + name + '\'' +
+                ", description='" + description + '\'' +
                 ", locale='" + locale + '\'' +
                 ", sourceLocale='" + sourceLocale + '\'' +
                 ", url='" + url + '\'' +
-- 
2.7.0


From e784e9c185a2009683051b4074d608a133fdf652 Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 12:18:51 -0400
Subject: [PATCH 03/22] category id and locale are required when creating a
 section

---
 src/main/java/org/zendesk/client/v2/Zendesk.java | 20 ++++++++++++++++++--
 1 file changed, 18 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index d49b5a3..21fab54 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -296,6 +296,18 @@ public class Zendesk implements Closeable {
         }
     }
 
+    private static void checkHasCategoryId(Section section) {
+        if (section.getCategoryId() == null) {
+            throw new IllegalArgumentException("Section requires category id");
+        }
+    }
+
+    private static void checkHasLocale(Section section) {
+        if (section.getLocale() == null) {
+            throw new IllegalArgumentException("Section requires locale");
+        }
+    }
+
     private static void checkHasToken(Attachment.Upload upload) {
         if (upload.getToken() == null) {
             throw new IllegalArgumentException("Upload requires token");
@@ -1653,8 +1665,12 @@ public class Zendesk implements Closeable {
     }
 
     public Section createSection(Section section) {
-        return complete(submit(req("POST", cnst("/help_center/sections.json"), JSON,
-                json(Collections.singletonMap("section", section))), handle(Section.class, "section")));
+        checkHasCategoryId(section);
+        checkHasLocale(section);
+        return complete(
+                submit(req("POST",
+                        tmpl("/help_center/categories/{id}/sections.json").set("id", section.getCategoryId()),
+                        JSON, json(Collections.singletonMap("section", section))), handle(Section.class, "section")));
     }
 
     public Section updateSection(Section section) {
-- 
2.7.0


From 35368ad94e1e86b5fa5afaa6cee3c29ee5c8e484 Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 12:24:17 -0400
Subject: [PATCH 04/22] add Section Access policy support

---
 src/main/java/org/zendesk/client/v2/Zendesk.java   |  15 +++
 .../zendesk/client/v2/model/hc/AccessPolicy.java   | 150 +++++++++++++++++++++
 2 files changed, 165 insertions(+)
 create mode 100644 src/main/java/org/zendesk/client/v2/model/hc/AccessPolicy.java

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index 21fab54..76a4ca7 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -43,6 +43,7 @@ import org.zendesk.client.v2.model.Trigger;
 import org.zendesk.client.v2.model.TwitterMonitor;
 import org.zendesk.client.v2.model.User;
 import org.zendesk.client.v2.model.UserField;
+import org.zendesk.client.v2.model.hc.AccessPolicy;
 import org.zendesk.client.v2.model.hc.Article;
 import org.zendesk.client.v2.model.hc.ArticleAttachments;
 import org.zendesk.client.v2.model.hc.Category;
@@ -1685,6 +1686,20 @@ public class Zendesk implements Closeable {
                 handleStatus()));
     }
 
+    public AccessPolicy getAccessPolicy(Section section) {
+        checkHasId(section);
+        return complete(submit(req("GET", tmpl("/help_center/sections/{id}/access_policy.json").set("id", section
+                        .getId())),
+                handle(AccessPolicy.class, "access_policy")));
+    }
+
+    public AccessPolicy updateAccessPolicy(Section section, AccessPolicy accessPolicy) {
+        checkHasId(section);
+        return complete(submit(req("PUT", tmpl("/help_center/sections/{id}/access_policy.json").set("id", section
+                        .getId()), JSON, json(Collections.singletonMap("access_policy", accessPolicy))),
+                handle(AccessPolicy.class, "access_policy")));
+    }
+
     private byte[] json(Object object) {
         try {
             return mapper.writeValueAsBytes(object);
diff --git a/src/main/java/org/zendesk/client/v2/model/hc/AccessPolicy.java b/src/main/java/org/zendesk/client/v2/model/hc/AccessPolicy.java
new file mode 100644
index 0000000..9644391
--- /dev/null
+++ b/src/main/java/org/zendesk/client/v2/model/hc/AccessPolicy.java
@@ -0,0 +1,150 @@
+package org.zendesk.client.v2.model.hc;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import java.util.List;
+
+/**
+ * The access policy of a section defines who can view or manage the content of a section.
+ */
+public class AccessPolicy {
+    /**
+     * The set of users who can view content
+     */
+    @JsonProperty("viewable_by")
+    private ViewableBy viewableBy;
+
+    /**
+     * The set of users who can manage content
+     */
+    @JsonProperty("manageable_by")
+    private ManageableBy manageableBy;
+
+    /**
+     * The ids of the groups that have access
+     */
+    @JsonProperty("restricted_to_group_ids")
+    private List<Long> restrictedToGroupIds;
+
+    /**
+     * The ids of the organizations that have access
+     */
+    @JsonProperty("restricted_to_organization_ids")
+    private List<Long> restrictedToOrganizationIds;
+
+    /**
+     * The tags a user must have to have access
+     */
+    @JsonProperty("required_tags")
+    private List<String> requiredTags;
+
+    public ViewableBy getViewableBy() {
+        return viewableBy;
+    }
+
+    public void setViewableBy(final ViewableBy viewableBy) {
+        this.viewableBy = viewableBy;
+    }
+
+    public ManageableBy getManageableBy() {
+        return manageableBy;
+    }
+
+    public void setManageableBy(final ManageableBy manageableBy) {
+        this.manageableBy = manageableBy;
+    }
+
+    public List<Long> getRestrictedToGroupIds() {
+        return restrictedToGroupIds;
+    }
+
+    public void setRestrictedToGroupIds(final List<Long> restrictedToGroupIds) {
+        this.restrictedToGroupIds = restrictedToGroupIds;
+    }
+
+    public List<Long> getRestrictedToOrganizationIds() {
+        return restrictedToOrganizationIds;
+    }
+
+    public void setRestrictedToOrganizationIds(final List<Long> restrictedToOrganizationIds) {
+        this.restrictedToOrganizationIds = restrictedToOrganizationIds;
+    }
+
+    public List<String> getRequiredTags() {
+        return requiredTags;
+    }
+
+    public void setRequiredTags(final List<String> requiredTags) {
+        this.requiredTags = requiredTags;
+    }
+
+    @Override
+    public String toString() {
+        return "AccessPolicy{" +
+                "viewableBy=" + viewableBy +
+                ", manageableBy=" + manageableBy +
+                ", restrictedToGroupIds=" + restrictedToGroupIds +
+                ", restrictedToOrganizationIds=" + restrictedToOrganizationIds +
+                ", requiredTags=" + requiredTags +
+                '}';
+    }
+
+    public enum ViewableBy {
+        EVERYBODY("everybody", "all users, signed in or not"),
+        SIGNED_IN_USERS("signed_in_users", "only authenticated users"),
+        STAFF("staff", "only agents and Help Center managers");
+
+        private final String name;
+
+        private final String description;
+
+        ViewableBy(String name, String description) {
+            this.name = name;
+            this.description = description;
+        }
+
+        /**
+         * Helper to resolve &lt;visibility-restriction-id&gt; values from exported Zendesk forums.xml.
+         *
+         * @param visibilityRestrictionid an id from the &lt;visibility-restriction-id&gt; element in exported Zendesk
+         *                                forums.xml
+         * @return am equivalent ViewableBy restriction based on the orginal id
+         */
+        public static ViewableBy resolveVisibilityRestrictionId(int visibilityRestrictionid) {
+            switch (visibilityRestrictionid) {
+                case 1:
+                    return EVERYBODY;
+                case 2:
+                    return SIGNED_IN_USERS;
+                case 3:
+                default:
+                    return STAFF; // guess the most restrictive access
+            }
+        }
+
+        @Override
+        public String toString() {
+            return name;
+        }
+
+    }
+
+    public enum ManageableBy {
+        STAFF("staff", "agents and managers"),
+        MANAGERS("managers", "only Help Center managers");
+
+        private final String name;
+
+        private final String description;
+
+        ManageableBy(String name, String description) {
+            this.name = name;
+            this.description = description;
+        }
+
+        @Override
+        public String toString() {
+            return name;
+        }
+    }
+}
-- 
2.7.0


From 646b0ec88b39d4bf51751f260e4ef3f5e9a3fd0f Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 12:46:01 -0400
Subject: [PATCH 05/22] make getSections use Iterable as the results are paged

---
 src/main/java/org/zendesk/client/v2/Zendesk.java | 14 ++++++++------
 1 file changed, 8 insertions(+), 6 deletions(-)

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index 76a4ca7..d697868 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -1643,15 +1643,17 @@ public class Zendesk implements Closeable {
                 handleStatus()));
     }
 
-    public List<Section> getSections() {
-        return complete(submit(req("GET", cnst("/help_center/sections.json")), handleList(Section.class, "sections")));
+    public Iterable<Section> getSections() {
+        return new PagedIterable<Section>(cnst("/help_center/sections.json"), handleList(Section.class,
+                "sections"));
     }
 
-    public List<Section> getSections(Category category) {
+    public Iterable<Section> getSections(Category category) {
         checkHasId(category);
-        return complete(
-                submit(req("GET", tmpl("/help_center/categories/{id}/sections.json").set("id", category.getId())),
-                        handleList(Section.class, "sections")));
+        return new PagedIterable<Section>(
+                tmpl("/help_center/categories/{id}/sections.json").set("id", category.getId()),
+                handleList(Section.class,
+                        "sections"));
     }
 
     public Section getSection(int id) {
-- 
2.7.0


From bfcf77ae7769d01764e3a5bf1763798f545901a9 Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Fri, 23 Oct 2015 12:36:46 -0300
Subject: [PATCH 06/22] add generic sort order - used by core and help center
 api

---
 .../java/org/zendesk/client/v2/model/SortOrder.java    | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)
 create mode 100644 src/main/java/org/zendesk/client/v2/model/SortOrder.java

diff --git a/src/main/java/org/zendesk/client/v2/model/SortOrder.java b/src/main/java/org/zendesk/client/v2/model/SortOrder.java
new file mode 100644
index 0000000..00f5167
--- /dev/null
+++ b/src/main/java/org/zendesk/client/v2/model/SortOrder.java
@@ -0,0 +1,18 @@
+package org.zendesk.client.v2.model;
+
+public enum SortOrder
+{
+  ASCENDING("asc"),
+  DESCENDING("desc");
+
+  private final String name;
+
+  SortOrder(String name) {
+    this.name = name;
+  }
+
+  @Override
+  public String toString() {
+    return name;
+  }
+}
-- 
2.7.0


From aa991142dcd534c2a90a5792f8c5bd6558c14c5a Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Fri, 23 Oct 2015 12:38:13 -0300
Subject: [PATCH 07/22] add article specific sort by options

---
 .../zendesk/client/v2/model/hc/ArticleSortBy.java    | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)
 create mode 100644 src/main/java/org/zendesk/client/v2/model/hc/ArticleSortBy.java

diff --git a/src/main/java/org/zendesk/client/v2/model/hc/ArticleSortBy.java b/src/main/java/org/zendesk/client/v2/model/hc/ArticleSortBy.java
new file mode 100644
index 0000000..6f98645
--- /dev/null
+++ b/src/main/java/org/zendesk/client/v2/model/hc/ArticleSortBy.java
@@ -0,0 +1,20 @@
+package org.zendesk.client.v2.model.hc;
+
+public enum ArticleSortBy
+{
+  POSITION("position"),
+  TITLE("title"),
+  CREATED_AT("created_at"),
+  UPDATED_AT("updated_at");
+
+  private final String name;
+
+  ArticleSortBy(String name) {
+    this.name = name;
+  }
+
+  @Override
+  public String toString() {
+    return name;
+  }
+}
-- 
2.7.0


From 132a8dfad0d393719903016bc062150e254511de Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 12:56:33 -0400
Subject: [PATCH 08/22] rename getArticleFromPage/getArticleFromSearch to
 plural form

---
 src/main/java/org/zendesk/client/v2/Zendesk.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index d697868..b2d5a35 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -481,12 +481,12 @@ public class Zendesk implements Closeable {
                 handleList(Ticket.class, "results"));
     }
 
-    public Iterable<Article> getArticleFromSearch(String searchTerm) {
+    public Iterable<Article> getArticlesFromSearch(String searchTerm) {
         return new PagedIterable<Article>(tmpl("/help_center/articles/search.json{?query}").set("query", searchTerm),
                 handleList(Article.class, "results"));
     }
 
-    public Iterable<Article> getArticleFromSearch(String searchTerm, Long sectionId) {
+    public Iterable<Article> getArticlesFromSearch(String searchTerm, Long sectionId) {
         return new PagedIterable<Article>(tmpl("/help_center/articles/search.json{?section,query}")
                 .set("query", searchTerm).set("section", sectionId), handleList(Article.class, "results"));
     }
-- 
2.7.0


From 93325f32da8936f7eef4a812b0b65b4ce76cc87a Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 12:58:40 -0400
Subject: [PATCH 09/22] make getCategories return Iterable to support paging

---
 src/main/java/org/zendesk/client/v2/Zendesk.java | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index b2d5a35..87231cc 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -1610,9 +1610,9 @@ public class Zendesk implements Closeable {
                 handleStatus()));
     }
 
-    public List<Category> getCategories() {
-        return complete(submit(req("GET", cnst("/help_center/categories.json")),
-                handleList(Category.class, "categories")));
+    public Iterable<Category> getCategories() {
+        return new PagedIterable<Category>(cnst("/help_center/categories.json"), handleList(Category.class,
+                "categories"));
     }
 
     public Category getCategory(int id) {
-- 
2.7.0


From 0150074363f19512cbcecf4b0f12eed07d591d7e Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 13:05:41 -0400
Subject: [PATCH 10/22] rename ArticleAttachments to ArticleAttachment

as it represents a single attachment, not a list of attachments
---
 src/main/java/org/zendesk/client/v2/Zendesk.java   |  20 +--
 .../client/v2/model/hc/ArticleAttachment.java      | 163 +++++++++++++++++++++
 .../client/v2/model/hc/ArticleAttachments.java     | 163 ---------------------
 3 files changed, 173 insertions(+), 173 deletions(-)
 create mode 100644 src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachment.java
 delete mode 100644 src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachments.java

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index 87231cc..6d6e6f1 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -45,7 +45,7 @@ import org.zendesk.client.v2.model.User;
 import org.zendesk.client.v2.model.UserField;
 import org.zendesk.client.v2.model.hc.AccessPolicy;
 import org.zendesk.client.v2.model.hc.Article;
-import org.zendesk.client.v2.model.hc.ArticleAttachments;
+import org.zendesk.client.v2.model.hc.ArticleAttachment;
 import org.zendesk.client.v2.model.hc.Category;
 import org.zendesk.client.v2.model.hc.Section;
 import org.zendesk.client.v2.model.hc.Translation;
@@ -491,7 +491,7 @@ public class Zendesk implements Closeable {
                 .set("query", searchTerm).set("section", sectionId), handleList(Article.class, "results"));
     }
 
-    public List<ArticleAttachments> getAttachmentsFromArticle(Long articleID) {
+    public List<ArticleAttachment> getAttachmentsFromArticle(Long articleID) {
         return complete(submit(req("GET", tmpl("/help_center/articles/{id}/attachments.json").set("id", articleID)),
                 handleArticleAttachmentsList("article_attachments")));
     }
@@ -678,7 +678,7 @@ public class Zendesk implements Closeable {
                 handleStatus()));
     }
 
-    public ArticleAttachments createUploadArticle(long articleId, File file) throws IOException {
+    public ArticleAttachment createUploadArticle(long articleId, File file) throws IOException {
         BoundRequestBuilder builder =
                 client.preparePost(tmpl("/help_center/articles/{id}/attachments.json").set("id", articleId).toString());
         if (realm != null) {
@@ -690,7 +690,7 @@ public class Zendesk implements Closeable {
         builder.addBodyPart(
                 new FilePart("file", file, "application/octet-stream", Charset.forName("UTF-8"), file.getName()));
         final Request req = builder.build();
-        return complete(submit(req, handle(ArticleAttachments.class, "article_attachment")));
+        return complete(submit(req, handle(ArticleAttachment.class, "article_attachment")));
     }
 
     public void deleteUpload(Attachment.Upload upload) {
@@ -1593,7 +1593,7 @@ public class Zendesk implements Closeable {
      *
      * @param attachment
      */
-    public void deleteArticleAttachment(ArticleAttachments attachment) {
+    public void deleteArticleAttachment(ArticleAttachment attachment) {
         if (attachment.getId() == 0) {
             throw new IllegalArgumentException("Attachment requires id");
         }
@@ -1903,16 +1903,16 @@ public class Zendesk implements Closeable {
         };
     }
 
-    protected PagedAsyncCompletionHandler<List<ArticleAttachments>> handleArticleAttachmentsList(final String name) {
-        return new PagedAsyncCompletionHandler<List<ArticleAttachments>>() {
+    protected PagedAsyncCompletionHandler<List<ArticleAttachment>> handleArticleAttachmentsList(final String name) {
+        return new PagedAsyncCompletionHandler<List<ArticleAttachment>>() {
             @Override
-            public List<ArticleAttachments> onCompleted(Response response) throws Exception {
+            public List<ArticleAttachment> onCompleted(Response response) throws Exception {
                 logResponse(response);
                 if (isStatus2xx(response)) {
                     JsonNode responseNode = mapper.readTree(response.getResponseBodyAsBytes());
-                    List<ArticleAttachments> values = new ArrayList<ArticleAttachments>();
+                    List<ArticleAttachment> values = new ArrayList<ArticleAttachment>();
                     for (JsonNode node : responseNode.get(name)) {
-                        values.add(mapper.convertValue(node, ArticleAttachments.class));
+                        values.add(mapper.convertValue(node, ArticleAttachment.class));
                     }
                     return values;
                 }
diff --git a/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachment.java b/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachment.java
new file mode 100644
index 0000000..4a11724
--- /dev/null
+++ b/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachment.java
@@ -0,0 +1,163 @@
+package org.zendesk.client.v2.model.hc;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import java.util.Date;
+
+public class ArticleAttachment {
+
+    /**
+     * Automatically assigned when the article attachment is created
+     */
+    private int id;
+
+    /**
+     * The API url of this article attachment
+     */
+    private String url;
+
+    /**
+     * Id of the associated article, if present
+     */
+    private int articleId;
+
+    /**
+     * The name of the file
+     */
+    private String fileName;
+
+    /**
+     * A full URL where the attachment file can be downloaded
+     */
+    private String contentUrl;
+
+    /**
+     * The content type of the file. Example: image/png
+     */
+    private String contentType;
+
+    /**
+     * The size of the attachment file in bytes
+     */
+    private int size;
+
+    /**
+     * If true, the attached file is shown in the dedicated admin UI for inline attachments and
+     * its url can be referenced in the HTML body of the article.
+     * If false, the attachment is listed in the list of attachments. Default is false
+     */
+    private boolean inline;
+
+    /**
+     * The time at which the article attachment was created
+     */
+    private Date createdAt;
+
+    /**
+     * The time at which the article attachment was last updated
+     */
+    private Date updatedAt;
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public String getUrl() {
+        return url;
+    }
+
+    public void setUrl(String url) {
+        this.url = url;
+    }
+
+    @JsonProperty("article_id")
+    public int getArticleId() {
+        return articleId;
+    }
+
+    public void setArticleId(int articleId) {
+        this.articleId = articleId;
+    }
+
+    @JsonProperty("file_name")
+    public String getFileName() {
+        return fileName;
+    }
+
+    public void setFileName(String fileName) {
+        this.fileName = fileName;
+    }
+
+    @JsonProperty("content_url")
+    public String getContentUrl() {
+        return contentUrl;
+    }
+
+    public void setContentUrl(String contentUrl) {
+        this.contentUrl = contentUrl;
+    }
+
+    @JsonProperty("content_type")
+    public String getContentType() {
+        return contentType;
+    }
+
+    public void setContentType(String contentType) {
+        this.contentType = contentType;
+    }
+
+    public int getSize() {
+        return size;
+    }
+
+    public void setSize(int size) {
+        this.size = size;
+    }
+
+    @JsonProperty("inline")
+    public boolean isInline() {
+        return inline;
+    }
+
+    public void setInline(boolean inline) {
+        this.inline = inline;
+    }
+
+    @JsonProperty("created_at")
+    public Date getCreatedAt() {
+        return createdAt;
+    }
+
+    public void setCreatedAt(Date createdAt) {
+        this.createdAt = createdAt;
+    }
+
+    @JsonProperty("updated_at")
+    public Date getUpdatedAt() {
+        return updatedAt;
+    }
+
+    public void setUpdatedAt(Date updatedAt) {
+        this.updatedAt = updatedAt;
+    }
+
+    @Override
+    public String toString() {
+        return "ArticleAttachment{" +
+                "id=" + id +
+                ", url='" + url + '\'' +
+                ", articleId=" + articleId +
+                ", fileName='" + fileName + '\'' +
+                ", contentUrl='" + contentUrl + '\'' +
+                ", contentType='" + contentType + '\'' +
+                ", size=" + size +
+                ", inline=" + inline +
+                ", createdAt=" + createdAt +
+                ", updatedAt=" + updatedAt +
+                '}';
+    }
+}
diff --git a/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachments.java b/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachments.java
deleted file mode 100644
index d8cedfd..0000000
--- a/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachments.java
+++ /dev/null
@@ -1,163 +0,0 @@
-package org.zendesk.client.v2.model.hc;
-
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-import java.util.Date;
-
-public class ArticleAttachments {
-
-    /**
-     * Automatically assigned when the article attachment is created
-     */
-    private int id;
-
-    /**
-     * The API url of this article attachment
-     */
-    private String url;
-
-    /**
-     * Id of the associated article, if present
-     */
-    private int articleId;
-
-    /**
-     * The name of the file
-     */
-    private String fileName;
-
-    /**
-     * A full URL where the attachment file can be downloaded
-     */
-    private String contentUrl;
-
-    /**
-     * The content type of the file. Example: image/png
-     */
-    private String contentType;
-
-    /**
-     * The size of the attachment file in bytes
-     */
-    private int size;
-
-    /**
-     * If true, the attached file is shown in the dedicated admin UI for inline attachments and
-     * its url can be referenced in the HTML body of the article.
-     * If false, the attachment is listed in the list of attachments. Default is false
-     */
-    private boolean inline;
-
-    /**
-     * The time at which the article attachment was created
-     */
-    private Date createdAt;
-
-    /**
-     * The time at which the article attachment was last updated
-     */
-    private Date updatedAt;
-
-    public int getId() {
-        return id;
-    }
-
-    public void setId(int id) {
-        this.id = id;
-    }
-
-    public String getUrl() {
-        return url;
-    }
-
-    public void setUrl(String url) {
-        this.url = url;
-    }
-
-    @JsonProperty("article_id")
-    public int getArticleId() {
-        return articleId;
-    }
-
-    public void setArticleId(int articleId) {
-        this.articleId = articleId;
-    }
-
-    @JsonProperty("file_name")
-    public String getFileName() {
-        return fileName;
-    }
-
-    public void setFileName(String fileName) {
-        this.fileName = fileName;
-    }
-
-    @JsonProperty("content_url")
-    public String getContentUrl() {
-        return contentUrl;
-    }
-
-    public void setContentUrl(String contentUrl) {
-        this.contentUrl = contentUrl;
-    }
-
-    @JsonProperty("content_type")
-    public String getContentType() {
-        return contentType;
-    }
-
-    public void setContentType(String contentType) {
-        this.contentType = contentType;
-    }
-
-    public int getSize() {
-        return size;
-    }
-
-    public void setSize(int size) {
-        this.size = size;
-    }
-
-    @JsonProperty("inline")
-    public boolean isInline() {
-        return inline;
-    }
-
-    public void setInline(boolean inline) {
-        this.inline = inline;
-    }
-
-    @JsonProperty("created_at")
-    public Date getCreatedAt() {
-        return createdAt;
-    }
-
-    public void setCreatedAt(Date createdAt) {
-        this.createdAt = createdAt;
-    }
-
-    @JsonProperty("updated_at")
-    public Date getUpdatedAt() {
-        return updatedAt;
-    }
-
-    public void setUpdatedAt(Date updatedAt) {
-        this.updatedAt = updatedAt;
-    }
-
-    @Override
-    public String toString() {
-        return "ArticleAttachments{" +
-                "id=" + id +
-                ", url='" + url + '\'' +
-                ", articleId=" + articleId +
-                ", fileName='" + fileName + '\'' +
-                ", contentUrl='" + contentUrl + '\'' +
-                ", contentType='" + contentType + '\'' +
-                ", size=" + size +
-                ", inline=" + inline +
-                ", createdAt=" + createdAt +
-                ", updatedAt=" + updatedAt +
-                '}';
-    }
-}
-- 
2.7.0


From 72034b7b4d2a1768988d96f2fdfdce760c7db029 Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 13:27:44 -0400
Subject: [PATCH 11/22] int to Long for sanity

---
 .../zendesk/client/v2/model/hc/ArticleAttachment.java  | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachment.java b/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachment.java
index 4a11724..2545f2a 100644
--- a/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachment.java
+++ b/src/main/java/org/zendesk/client/v2/model/hc/ArticleAttachment.java
@@ -9,7 +9,7 @@ public class ArticleAttachment {
     /**
      * Automatically assigned when the article attachment is created
      */
-    private int id;
+    private Long id;
 
     /**
      * The API url of this article attachment
@@ -19,7 +19,7 @@ public class ArticleAttachment {
     /**
      * Id of the associated article, if present
      */
-    private int articleId;
+    private Long articleId;
 
     /**
      * The name of the file
@@ -39,7 +39,7 @@ public class ArticleAttachment {
     /**
      * The size of the attachment file in bytes
      */
-    private int size;
+    private Long size;
 
     /**
      * If true, the attached file is shown in the dedicated admin UI for inline attachments and
@@ -58,11 +58,11 @@ public class ArticleAttachment {
      */
     private Date updatedAt;
 
-    public int getId() {
+    public Long getId() {
         return id;
     }
 
-    public void setId(int id) {
+    public void setId(Long id) {
         this.id = id;
     }
 
@@ -75,11 +75,11 @@ public class ArticleAttachment {
     }
 
     @JsonProperty("article_id")
-    public int getArticleId() {
+    public Long getArticleId() {
         return articleId;
     }
 
-    public void setArticleId(int articleId) {
+    public void setArticleId(Long articleId) {
         this.articleId = articleId;
     }
 
@@ -110,11 +110,11 @@ public class ArticleAttachment {
         this.contentType = contentType;
     }
 
-    public int getSize() {
+    public Long getSize() {
         return size;
     }
 
-    public void setSize(int size) {
+    public void setSize(Long size) {
         this.size = size;
     }
 
-- 
2.7.0


From c15ef3c6a95aa939ccb6bc1197810f657bdc37d9 Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 14:13:55 -0400
Subject: [PATCH 12/22] proper expanded implementation for listing article
 attachments

---
 src/main/java/org/zendesk/client/v2/Zendesk.java | 100 +++++++++++++++++++----
 1 file changed, 82 insertions(+), 18 deletions(-)

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index 6d6e6f1..9560fc2 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -16,6 +16,8 @@ import com.ning.http.client.Request;
 import com.ning.http.client.RequestBuilder;
 import com.ning.http.client.Response;
 import com.ning.http.client.multipart.FilePart;
+import com.ning.http.client.multipart.Part;
+import com.ning.http.client.multipart.StringPart;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.zendesk.client.v2.model.Attachment;
@@ -82,6 +84,7 @@ import java.util.regex.Pattern;
  */
 public class Zendesk implements Closeable {
     private static final String JSON = "application/json; charset=UTF-8";
+    private static final String MULTIPART_FORM_DATA = "multipart/form-data; charset=UTF-8";
     private static final Map<String, Class<? extends SearchResultEntity>> searchResultTypes = searchResultTypes();
     private static final Map<String, Class<? extends Target>> targetTypes = targetTypes();
     private static final Pattern RESTRICTED_PATTERN = Pattern.compile("%2B", Pattern.LITERAL);
@@ -273,6 +276,12 @@ public class Zendesk implements Closeable {
         }
     }
 
+    private static void checkHasId(ArticleAttachment articleAttachment) {
+        if (articleAttachment.getId() == null) {
+            throw new IllegalArgumentException("ArticleAttachment requires id");
+        }
+    }
+
     private static void checkHasSectionId(Article article) {
         if (article.getSectionId() == null) {
             throw new IllegalArgumentException("Article requires section id");
@@ -1589,15 +1598,59 @@ public class Zendesk implements Closeable {
     }
 
     /**
+     * List all the article attachments for an article.
+     */
+    public List<ArticleAttachment> listArticleAttachments(Article article) {
+        checkHasId(article);
+        return Arrays.asList(complete(submit(req("GET", tmpl("/help_center/articles/{articleId}/attachments.json").set
+                        ("articleId",
+                                article.getId())),
+                handle(ArticleAttachment[].class, "article_attachments"))));
+    }
+
+    /**
+     * List all the inline article attachments for an article.
+     */
+    public List<ArticleAttachment> listArticleInlineAttachments(Article article) {
+        checkHasId(article);
+        return Arrays.asList(
+                complete(submit(req("GET",
+                        tmpl("/help_center/articles/{articleId}/attachments/inline.json").set("articleId",
+                                article.getId())),
+                        handle(ArticleAttachment[].class, "article_attachments"))));
+    }
+
+    /**
+     * List all the block article attachments for an article.
+     */
+    public List<ArticleAttachment> listArticleBlockAttachments(Article article) {
+        checkHasId(article);
+        return Arrays.asList(
+                complete(submit(req("GET",
+                        tmpl("/help_center/articles/{articleId}/attachments/block.json").set("articleId",
+                                article.getId())),
+                        handle(ArticleAttachment[].class, "article_attachments"))));
+    }
+
+    public ArticleAttachment createArticleAttachment(Article article, boolean inline, File file, String fileName) {
+        checkHasId(article);
+        FilePart filePart = new FilePart("file", file);
+        filePart.setFileName(fileName != null ? fileName : file.getName());
+        Part inlinePart = new StringPart("inline", Boolean.toString(inline));
+        return complete(
+                submit(req("POST", tmpl("/help_center/articles/{id}/attachments.json").set("id", article.getId()),
+                        inlinePart, filePart),
+                        handle(ArticleAttachment.class, "article_attachment")));
+    }
+
+    /**
      * Delete attachment from article.
      *
-     * @param attachment
+     * @param articleAttachment
      */
-    public void deleteArticleAttachment(ArticleAttachment attachment) {
-        if (attachment.getId() == 0) {
-            throw new IllegalArgumentException("Attachment requires id");
-        }
-        deleteArticleAttachment(attachment.getId());
+    public void deleteArticleAttachment(ArticleAttachment articleAttachment) {
+        checkHasId(articleAttachment);
+        deleteArticleAttachment(articleAttachment.getId());
     }
 
     /**
@@ -1734,30 +1787,41 @@ public class Zendesk implements Closeable {
 
     private Request req(String method, String url) {
         RequestBuilder builder = new RequestBuilder(method);
-        if (realm != null) {
-            builder.setRealm(realm);
-        } else {
-            builder.addHeader("Authorization", "Bearer " + oauthToken);
-        }
-        builder.setUrl(
-                RESTRICTED_PATTERN.matcher(url).replaceAll("+")); // replace out %2B with + due to API restriction
+        applyCommonRequestSettings(builder, url);
         return builder.build();
     }
 
     private Request req(String method, Uri template, String contentType, byte[] body) {
         RequestBuilder builder = new RequestBuilder(method);
+        applyCommonRequestSettings(builder, url);
+        builder.addHeader("Content-type", contentType);
+        builder.setBody(body);
+        return builder.build();
+    }
+
+    private Request req(String method, Uri template, Part... parts) {
+        RequestBuilder builder = new RequestBuilder(method);
+        applyCommonRequestSettings(builder, template.toString());
+        builder.addHeader("Content-type", MULTIPART_FORM_DATA);
+        if (parts != null) {
+            for (Part part : parts) {
+                builder.addBodyPart(part);
+            }
+        }
+        return builder.build();
+    }
+
+    private void applyCommonRequestSettings(RequestBuilder builder, String url) {
         if (realm != null) {
             builder.setRealm(realm);
         } else {
             builder.addHeader("Authorization", "Bearer " + oauthToken);
         }
-        builder.setUrl(RESTRICTED_PATTERN.matcher(template.toString())
-                .replaceAll("+")); //replace out %2B with + due to API restriction
-        builder.addHeader("Content-type", contentType);
-        builder.setBody(body);
-        return builder.build();
+        builder.setUrl(
+                RESTRICTED_PATTERN.matcher(url).replaceAll("+")); // replace out %2B with + due to API restriction
     }
 
+
     protected ZendeskAsyncCompletionHandler<Void> handleStatus() {
         return new ZendeskAsyncCompletionHandler<Void>() {
             @Override
-- 
2.7.0


From 83671fdf4118318be2cae4b26b0307075d373ace Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 14:15:31 -0400
Subject: [PATCH 13/22] paged getTicketForms

---
 src/main/java/org/zendesk/client/v2/Zendesk.java | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index 9560fc2..2a6529d 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -390,9 +390,9 @@ public class Zendesk implements Closeable {
                 "ticket_form")));
     }
 
-    public List<TicketForm> getTicketForms() {
-        return complete(submit(req("GET", cnst("/ticket_forms.json")), handleList(TicketForm.class,
-                "ticket_forms")));
+    public Iterable<TicketForm> getTicketForms() {
+        return new PagedIterable<TicketForm>(cnst("/ticket_forms.json"), handleList(TicketForm.class,
+                "ticket_forms"));
     }
 
     public Ticket getTicket(long id) {
-- 
2.7.0


From cf2d3a2df68016ce989899c1407f3ecc9d52576e Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 14:16:09 -0400
Subject: [PATCH 14/22] paged getTicketFields

---
 src/main/java/org/zendesk/client/v2/Zendesk.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index 2a6529d..6649795 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -616,8 +616,8 @@ public class Zendesk implements Closeable {
                         .set("auditId", auditId)), handleStatus()));
     }
 
-    public List<Field> getTicketFields() {
-        return complete(submit(req("GET", cnst("/ticket_fields.json")), handleList(Field.class, "ticket_fields")));
+    public Iterable<Field> getTicketFields() {
+        return new PagedIterable<Field>(cnst("/ticket_fields.json"), handleList(Field.class, "ticket_fields"));
     }
 
     public Field getTicketField(long id) {
-- 
2.7.0


From b85c5a07740d066d28447b366db09ece4885a71c Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 14:18:00 -0400
Subject: [PATCH 15/22] add deleteTicketForm

---
 src/main/java/org/zendesk/client/v2/Zendesk.java | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index 6649795..aa7f201 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -210,6 +210,12 @@ public class Zendesk implements Closeable {
         }
     }
 
+    private static void checkHasId(TicketForm ticketForm) {
+        if (ticketForm.getId() == null) {
+            throw new IllegalArgumentException("TicketForm requires id");
+        }
+    }
+
     private static void checkHasId(org.zendesk.client.v2.model.Request request) {
         if (request.getId() == null) {
             throw new IllegalArgumentException("Request requires id");
@@ -395,6 +401,11 @@ public class Zendesk implements Closeable {
                 "ticket_forms"));
     }
 
+    public void deleteTicketForm(TicketForm ticketForm) {
+        checkHasId(ticketForm);
+        complete(submit(req("DELETE", tmpl("/ticket_forms/{id}.json").set("id", ticketForm.getId())), handleStatus()));
+    }
+
     public Ticket getTicket(long id) {
         return complete(submit(req("GET", tmpl("/tickets/{id}.json").set("id", id)), handle(Ticket.class,
                 "ticket")));
-- 
2.7.0


From d08483c50f2a519c27ebd0441be70a2560646b2f Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 14:19:33 -0400
Subject: [PATCH 16/22] add brands to TicketForm

---
 .../org/zendesk/client/v2/model/TicketForm.java    | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/src/main/java/org/zendesk/client/v2/model/TicketForm.java b/src/main/java/org/zendesk/client/v2/model/TicketForm.java
index 9b941c6..3c78d5c 100644
--- a/src/main/java/org/zendesk/client/v2/model/TicketForm.java
+++ b/src/main/java/org/zendesk/client/v2/model/TicketForm.java
@@ -29,6 +29,10 @@ public class TicketForm implements SearchResultEntity {
     private Date createdAt;
     @JsonProperty("updated_at")
     private Date updatedAt;
+    @JsonProperty("in_all_brands")
+    private Boolean inAllBrands;
+    @JsonProperty("restricted_brand_ids")
+    private List<Long> restrictedBrandIds;
 
     public String getName() {
         return name;
@@ -125,4 +129,22 @@ public class TicketForm implements SearchResultEntity {
     public void setId(Long id) {
         this.id = id;
     }
+
+
+    public boolean isInAllBrands() {
+        return inAllBrands;
+    }
+
+    public void setInAllBrands(boolean inAllBrands) {
+        this.inAllBrands = inAllBrands;
+    }
+
+    public List<Long> getRestrictedBrandIds() {
+        return restrictedBrandIds;
+    }
+
+    public void setRestrictedBrandIds(final List<Long> restrictedBrandIds) {
+        this.restrictedBrandIds = restrictedBrandIds;
+    }
+
 }
-- 
2.7.0


From c2d23dc71f77977b339005a30793166d8c8318a1 Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Tue, 3 Nov 2015 15:12:13 -0400
Subject: [PATCH 17/22] Integer should be Long for field ids

---
 src/main/java/org/zendesk/client/v2/model/TicketForm.java | 6 +++---
 src/test/java/org/zendesk/client/v2/RealSmokeTest.java    | 2 +-
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/main/java/org/zendesk/client/v2/model/TicketForm.java b/src/main/java/org/zendesk/client/v2/model/TicketForm.java
index 3c78d5c..5cdcf2d 100644
--- a/src/main/java/org/zendesk/client/v2/model/TicketForm.java
+++ b/src/main/java/org/zendesk/client/v2/model/TicketForm.java
@@ -24,7 +24,7 @@ public class TicketForm implements SearchResultEntity {
     @JsonProperty("default")
     private boolean defaultForm;
     @JsonProperty("ticket_field_ids")
-    private List<Integer> ticketFieldIds;
+    private List<Long> ticketFieldIds;
     @JsonProperty("created_at")
     private Date createdAt;
     @JsonProperty("updated_at")
@@ -98,11 +98,11 @@ public class TicketForm implements SearchResultEntity {
         this.defaultForm = defaultForm;
     }
 
-    public List<Integer> getTicketFieldIds() {
+    public List<Long> getTicketFieldIds() {
         return ticketFieldIds;
     }
 
-    public void setTicketFieldIds(List<Integer> ticketFieldIds) {
+    public void setTicketFieldIds(List<Long> ticketFieldIds) {
         this.ticketFieldIds = ticketFieldIds;
     }
 
diff --git a/src/test/java/org/zendesk/client/v2/RealSmokeTest.java b/src/test/java/org/zendesk/client/v2/RealSmokeTest.java
index 515ddca..c8025b1 100644
--- a/src/test/java/org/zendesk/client/v2/RealSmokeTest.java
+++ b/src/test/java/org/zendesk/client/v2/RealSmokeTest.java
@@ -140,7 +140,7 @@ public class RealSmokeTest {
     public void getTicketFieldsOnForm() throws Exception {
         createClientWithTokenOrPassword();
         TicketForm ticketForm = instance.getTicketForm(27562);
-        for (Integer id : ticketForm.getTicketFieldIds()) {
+        for (Long id : ticketForm.getTicketFieldIds()) {
             Field f = instance.getTicketField(id);
             assertNotNull(f);
         }
-- 
2.7.0


From ae56e602f33862aa5809260f7f9d5dfdaf7f4647 Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 14:25:11 -0400
Subject: [PATCH 18/22] fix typo inside deleteTicketField

---
 src/main/java/org/zendesk/client/v2/Zendesk.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index aa7f201..ee8ab56 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -649,7 +649,7 @@ public class Zendesk implements Closeable {
 
     public void deleteTicketField(Field field) {
         checkHasId(field);
-        deleteTicket(field.getId());
+        deleteTicketField(field.getId());
     }
 
     public void deleteTicketField(long id) {
-- 
2.7.0


From d81f094733638cd2608f5033ff312717ea5f659a Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 14:26:07 -0400
Subject: [PATCH 19/22] add createTicketForm

---
 src/main/java/org/zendesk/client/v2/Zendesk.java | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index ee8ab56..0385f55 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -401,6 +401,12 @@ public class Zendesk implements Closeable {
                 "ticket_forms"));
     }
 
+    public TicketForm createTicketForm(TicketForm ticketForm) {
+        return complete(submit(req("POST", cnst("/ticket_forms.json"),
+                JSON, json(Collections.singletonMap("ticket_form", ticketForm))),
+                handle(TicketForm.class, "ticket_form")));
+    }
+
     public void deleteTicketForm(TicketForm ticketForm) {
         checkHasId(ticketForm);
         complete(submit(req("DELETE", tmpl("/ticket_forms/{id}.json").set("id", ticketForm.getId())), handleStatus()));
-- 
2.7.0


From 947d1dc818fea3fbe668df81b667269ca503a755 Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 14:27:34 -0400
Subject: [PATCH 20/22] add updateTicketForm

---
 src/main/java/org/zendesk/client/v2/Zendesk.java | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index 0385f55..cfe9916 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -407,6 +407,12 @@ public class Zendesk implements Closeable {
                 handle(TicketForm.class, "ticket_form")));
     }
 
+    public TicketForm updateTicketForm(TicketForm ticketForm) {
+        return complete(submit(req("PUT", tmpl("/ticket_forms/{id}.json").set("id", ticketForm.getId()),
+                JSON, json(Collections.singletonMap("ticket_form", ticketForm))),
+                handle(TicketForm.class, "ticket_form")));
+    }
+
     public void deleteTicketForm(TicketForm ticketForm) {
         checkHasId(ticketForm);
         complete(submit(req("DELETE", tmpl("/ticket_forms/{id}.json").set("id", ticketForm.getId())), handleStatus()));
-- 
2.7.0


From 1a2baa548203fbaed9fae89588c9258223298206 Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 14:28:42 -0400
Subject: [PATCH 21/22] improve javadoc describing an Action

---
 src/main/java/org/zendesk/client/v2/model/Action.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/main/java/org/zendesk/client/v2/model/Action.java b/src/main/java/org/zendesk/client/v2/model/Action.java
index ca6be8c..f137929 100644
--- a/src/main/java/org/zendesk/client/v2/model/Action.java
+++ b/src/main/java/org/zendesk/client/v2/model/Action.java
@@ -13,7 +13,7 @@ import java.util.Collections;
 import java.util.List;
 
 /**
- * Zendesk sometimes returns JSON with a String instead of String[] so we need a custom deserializer.
+ * An Action is describing what to do and is common to {@link Trigger}s, {@link Automation}s, and {@link Macro}s.
  *
  * @author adavidson
  * @author Johno Crawford (johno@sulake.com)
-- 
2.7.0


From 83730129826864398feab328e8b2457aff5cf1de Mon Sep 17 00:00:00 2001
From: Peter Lynch <plynch@sonatype.com>
Date: Mon, 8 Feb 2016 14:32:51 -0400
Subject: [PATCH 22/22] add listAutomations and generify Conditions

---
 src/main/java/org/zendesk/client/v2/Zendesk.java   |  4 ++
 .../org/zendesk/client/v2/model/Automation.java    | 80 ++++++++++++---------
 .../org/zendesk/client/v2/model/Conditions.java    | 62 ++++++++++++++--
 .../java/org/zendesk/client/v2/model/Trigger.java  | 83 ----------------------
 4 files changed, 107 insertions(+), 122 deletions(-)

diff --git a/src/main/java/org/zendesk/client/v2/Zendesk.java b/src/main/java/org/zendesk/client/v2/Zendesk.java
index cfe9916..1b021e4 100644
--- a/src/main/java/org/zendesk/client/v2/Zendesk.java
+++ b/src/main/java/org/zendesk/client/v2/Zendesk.java
@@ -807,6 +807,10 @@ public class Zendesk implements Closeable {
                 handle(Automation.class, "automation")));
     }
 
+    public Iterable<Automation> listAutomations() {
+        return new PagedIterable<Automation>(cnst("/automations.json"), handleList(Automation.class, "automations"));
+    }
+
     public Automation createAutomation(Automation automation) {
         return complete(submit(
                 req("POST", cnst("/automations.json"), JSON,
diff --git a/src/main/java/org/zendesk/client/v2/model/Automation.java b/src/main/java/org/zendesk/client/v2/model/Automation.java
index 0e681ec..5c7ce09 100644
--- a/src/main/java/org/zendesk/client/v2/model/Automation.java
+++ b/src/main/java/org/zendesk/client/v2/model/Automation.java
@@ -1,32 +1,38 @@
-/**
- *
- */
 package org.zendesk.client.v2.model;
 
 import java.util.Date;
 import java.util.List;
 
-
 /**
- * https://developer.zendesk.com/rest_api/docs/core/automations
+ * <a href="https://developer.zendesk.com/rest_api/docs/core/automations">Automation</a>s consist of one or more actions
+ * that are performed if certain conditions are met after a period of time.
  *
- * @author Sandeep Kaul (sandeep.kaul@olacabs.com)
+ * @since FIXME
  */
 public class Automation {
-
     private Long id;
     private String title;
-    private Boolean active;
-    private List<Action> actions;
-    private Conditions conditions;
-    private int position;
+    private boolean active;
+    private Integer position;
     private Date createdAt;
     private Date updatedAt;
+    private Conditions conditions;
+    private List<Action> actions;
 
+    /**
+     * Get the unique id of the automation automatically assigned when created.
+     *
+     * @return the unique id of the the automation
+     */
     public Long getId() {
         return id;
     }
 
+    /**
+     * Set the unique id of the automation used when performing an operation on an existing automation.
+     *
+     * @param id the id to set
+     */
     public void setId(Long id) {
         this.id = id;
     }
@@ -39,28 +45,20 @@ public class Automation {
         this.title = title;
     }
 
-    public Boolean getActive() {
+    public boolean isActive() {
         return active;
     }
 
-    public void setActive(Boolean active) {
+    public void setActive(boolean active) {
         this.active = active;
     }
 
-    public List<Action> getActions() {
-        return actions;
-    }
-
-    public void setActions(List<Action> actions) {
-        this.actions = actions;
-    }
-
-    public Conditions getConditions() {
-        return conditions;
+    public Integer getPosition() {
+        return position;
     }
 
-    public void setConditions(Conditions conditions) {
-        this.conditions = conditions;
+    public void setPosition(Integer position) {
+        this.position = position;
     }
 
     public Date getCreatedAt() {
@@ -79,20 +77,34 @@ public class Automation {
         this.updatedAt = updatedAt;
     }
 
-    public int getPosition() {
-        return position;
+    public Conditions getConditions() {
+        return conditions;
     }
 
-    public void setPosition(int position) {
-        this.position = position;
+    public void setConditions(Conditions conditions) {
+        this.conditions = conditions;
     }
 
-    @Override
-    public String toString() {
-        return "Automation [id=" + id + ", title=" + title + ", active=" + active + ", actions="
-                + actions + ", conditions=" + conditions + ", position=" + position + ", createdAt="
-                + createdAt + ", updatedAt=" + updatedAt + "]";
+    public List<Action> getActions() {
+        return actions;
     }
 
+    public void setActions(List<Action> actions) {
+        this.actions = actions;
+    }
 
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder("Automation{");
+        sb.append("id=").append(id);
+        sb.append(", title='").append(title).append('\'');
+        sb.append(", active=").append(active);
+        sb.append(", position=").append(position);
+        sb.append(", createdAt=").append(createdAt);
+        sb.append(", updatedAt=").append(updatedAt);
+        sb.append(", conditions=").append(conditions);
+        sb.append(", actions=").append(actions);
+        sb.append('}');
+        return sb.toString();
+    }
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/Conditions.java b/src/main/java/org/zendesk/client/v2/model/Conditions.java
index 05875f2..6d0f86a 100644
--- a/src/main/java/org/zendesk/client/v2/model/Conditions.java
+++ b/src/main/java/org/zendesk/client/v2/model/Conditions.java
@@ -1,17 +1,14 @@
-/**
- *
- */
 package org.zendesk.client.v2.model;
 
 import java.util.ArrayList;
 import java.util.List;
 
-
 /**
- * @author Sandeep Kaul(sandeep.kaul@olacabs.com)
+ * Conditions are common to {@link Trigger}s, {@link Automation}s, views and SLA Policies.
  */
 public class Conditions {
     private List<Condition> all = new ArrayList<Condition>();
+
     private List<Condition> any = new ArrayList<Condition>();
 
     public List<Condition> getAll() {
@@ -40,4 +37,59 @@ public class Conditions {
         return sb.toString();
     }
 
+    /**
+     * A condition checks field values for truth.
+     */
+    public static class Condition {
+        private String field;
+
+        private String operator;
+
+        private String value;
+
+        public Condition() {
+        }
+
+        public Condition(String field, String operator, String value) {
+            this.field = field;
+            this.operator = operator;
+            this.value = value;
+        }
+
+        public String getField() {
+            return field;
+        }
+
+        public void setField(String field) {
+            this.field = field;
+        }
+
+        public String getOperator() {
+            return operator;
+        }
+
+        public void setOperator(String operator) {
+            this.operator = operator;
+        }
+
+        public String getValue() {
+            return value;
+        }
+
+        public void setValue(String value) {
+            this.value = value;
+        }
+
+        @Override
+        public String toString() {
+            final StringBuilder sb = new StringBuilder();
+            sb.append("Condition");
+            sb.append("{field=").append(field);
+            sb.append(", operator=").append(operator);
+            sb.append(", value=").append(value);
+            sb.append('}');
+            return sb.toString();
+        }
+
+    }
 }
diff --git a/src/main/java/org/zendesk/client/v2/model/Trigger.java b/src/main/java/org/zendesk/client/v2/model/Trigger.java
index cc79392..c2941a8 100644
--- a/src/main/java/org/zendesk/client/v2/model/Trigger.java
+++ b/src/main/java/org/zendesk/client/v2/model/Trigger.java
@@ -1,6 +1,5 @@
 package org.zendesk.client.v2.model;
 
-import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
 
@@ -99,86 +98,4 @@ public class Trigger {
         return sb.toString();
     }
 
-    public static class Conditions {
-        private List<Condition> all = new ArrayList<Condition>();
-        private List<Condition> any = new ArrayList<Condition>();
-
-        public List<Condition> getAll() {
-            return all;
-        }
-
-        public void setAll(List<Condition> all) {
-            this.all = all;
-        }
-
-        public List<Condition> getAny() {
-            return any;
-        }
-
-        public void setAny(List<Condition> any) {
-            this.any = any;
-        }
-
-        @Override
-        public String toString() {
-            final StringBuilder sb = new StringBuilder();
-            sb.append("Conditions");
-            sb.append("{all=").append(all);
-            sb.append(", any=").append(any);
-            sb.append('}');
-            return sb.toString();
-        }
-    }
-
-    public static class Condition {
-        private String field;
-        private String operator;
-        private String value;
-
-        public Condition() {
-        }
-
-        public Condition(String field, String operator, String value) {
-            this.field = field;
-            this.operator = operator;
-            this.value = value;
-        }
-
-        public String getField() {
-            return field;
-        }
-
-        public void setField(String field) {
-            this.field = field;
-        }
-
-        public String getOperator() {
-            return operator;
-        }
-
-        public void setOperator(String operator) {
-            this.operator = operator;
-        }
-
-        public String getValue() {
-            return value;
-        }
-
-        public void setValue(String value) {
-            this.value = value;
-        }
-
-        @Override
-        public String toString() {
-            final StringBuilder sb = new StringBuilder();
-            sb.append("Condition");
-            sb.append("{field=").append(field);
-            sb.append(", operator=").append(operator);
-            sb.append(", value=").append(value);
-            sb.append('}');
-            return sb.toString();
-        }
-
-    }
-
 }
-- 
2.7.0

